/**
 * Commande /anime - Transforme une image en style anime avec Replicate API
 * @param {string} senderId - ID de l'utilisateur
 * @param {string} args - Arguments de la commande
 * @param {object} ctx - Contexte partag√© du bot
 */

const axios = require('axios');

// ‚úÖ Configuration Replicate API
const REPLICATE_API_TOKEN = process.env.REPLICATE_API_TOKEN || "";
const REPLICATE_API_URL = "https://api.replicate.com/v1/predictions";

// ‚úÖ Mod√®le AnimeGAN v2 sur Replicate (gratuit)
const ANIME_MODEL_VERSION = "cjwbw/animeganv2:8e754e0e16f2a27a38b2ab0c6f29c7e408e99c4a5bb1f70b8e12d7d2b7b8e0a7";

// ‚úÖ Protection anti-spam
const userAnimeRequests = new Map();
const ANIME_COOLDOWN_MS = 30000; // 30 secondes entre chaque transformation

// ‚úÖ √âtats de traitement
const ProcessingState = {
    WAITING_IMAGE: 'waiting_image',
    PROCESSING: 'processing',
    COMPLETED: 'completed',
    ERROR: 'error'
};

module.exports = async function cmdAnime(senderId, args, ctx) {
    const { log, addToMemory, sleep, sendMessage, sendImageMessage, userLastImage } = ctx;
    const senderIdStr = String(senderId);
    
    // ‚úÖ V√©rifier la configuration de l'API
    if (!REPLICATE_API_TOKEN) {
        log.error("‚ùå REPLICATE_API_TOKEN manquant");
        return `‚ùå D√©sol√©e ! La transformation anime n'est pas configur√©e...

üîß Configuration n√©cessaire :
‚Ä¢ Variable d'environnement REPLICATE_API_TOKEN
‚Ä¢ Obtiens ta cl√© gratuite sur https://replicate.com

üíï Demande √† l'admin de configurer √ßa !`;
    }
    
    // ‚úÖ PROTECTION ANTI-SPAM
    const now = Date.now();
    if (userAnimeRequests.has(senderIdStr)) {
        const lastRequest = userAnimeRequests.get(senderIdStr);
        const timeSinceLastRequest = now - lastRequest;
        if (timeSinceLastRequest < ANIME_COOLDOWN_MS) {
            const remainingSeconds = Math.ceil((ANIME_COOLDOWN_MS - timeSinceLastRequest) / 1000);
            return `‚è∞ Patience ! Attends ${remainingSeconds}s avant une nouvelle transformation ! üé®‚ú®`;
        }
    }
    
    const command = args.toLowerCase().trim();
    
    // ‚úÖ Commande /anime aide
    if (command === 'aide' || command === 'help' || !command) {
        return `üé® Transformation Anime avec IA ! ‚ú®

üì∏ Comment √ßa marche ?
1Ô∏è‚É£ Envoie-moi une photo
2Ô∏è‚É£ Tape /anime
3Ô∏è‚É£ Re√ßois ta version anime ! üßë‚Äçüé§

üí° Exemples d'usage :
‚Ä¢ /anime - Transformer la derni√®re image
‚Ä¢ /anime [URL] - Transformer une image depuis une URL

‚ö° Fonctionnalit√©s :
‚ú® Style anime professionnel
üé≠ Pr√©serve les traits du visage
üåà Couleurs vibrantes
üñºÔ∏è Haute qualit√©

‚è∞ Cooldown : 30 secondes
üÜì Service gratuit via Replicate

üíï Pr√™t(e) √† devenir un personnage d'anime ?`;
    }
    
    // ‚úÖ D√©terminer l'image √† transformer
    let imageUrl = null;
    
    // Cas 1 : URL fournie en argument
    if (command && (command.startsWith('http://') || command.startsWith('https://'))) {
        imageUrl = command;
        log.info(`üñºÔ∏è URL fournie par ${senderId}: ${imageUrl}`);
    }
    // Cas 2 : Derni√®re image envoy√©e par l'utilisateur
    else if (userLastImage.has(senderIdStr)) {
        imageUrl = userLastImage.get(senderIdStr);
        log.info(`üñºÔ∏è Utilisation derni√®re image de ${senderId}`);
    }
    // Cas 3 : Aucune image disponible
    else {
        return `üì∏ Oh non ! Je n'ai pas d'image √† transformer !

üí° Solutions :
1Ô∏è‚É£ Envoie-moi d'abord une photo
2Ô∏è‚É£ Puis tape /anime
OU
3Ô∏è‚É£ Tape /anime [URL de ton image]

Exemple :
/anime https://exemple.com/photo.jpg

‚ú® Essaie et deviens un personnage d'anime ! üíï`;
    }
    
    // ‚úÖ Valider l'URL de l'image
    if (!isValidImageUrl(imageUrl)) {
        return `‚ùå Cette URL ne semble pas valide !

üí° L'URL doit :
‚Ä¢ Commencer par http:// ou https://
‚Ä¢ Pointer vers une image (jpg, jpeg, png)

Exemple valide :
/anime https://exemple.com/photo.jpg

R√©essaie avec une bonne URL ! üíï`;
    }
    
    // ‚úÖ Mettre √† jour le cooldown
    userAnimeRequests.set(senderIdStr, now);
    
    // ‚úÖ Message de d√©but de traitement
    addToMemory(senderId, 'user', `/anime - Transformation anime demand√©e`);
    
    await sendMessage(senderId, `üé® Transformation en cours... ‚ú®

üì∏ Image analys√©e
üß† IA en action
‚è≥ √áa peut prendre 10-30 secondes...

üíï Patience, la magie op√®re !`);
    
    try {
        // ‚úÖ Appeler l'API Replicate pour la transformation
        log.info(`üé® D√©but transformation anime pour ${senderId}`);
        
        const animeImageUrl = await transformToAnime(imageUrl, log);
        
        if (!animeImageUrl) {
            throw new Error("Transformation √©chou√©e - URL vide");
        }
        
        log.info(`‚úÖ Transformation r√©ussie pour ${senderId}: ${animeImageUrl}`);
        
        // ‚úÖ Envoyer l'image transform√©e
        const caption = `‚ú® Ta transformation anime est pr√™te ! üé≠

üé® Style : AnimeGAN v2
‚ö° Qualit√© : Professionnelle
üíñ Cr√©√©e avec amour par IA

üí° Envoie une autre photo et tape /anime pour une nouvelle transformation !`;
        
        addToMemory(senderId, 'assistant', 'Transformation anime r√©ussie');
        
        return {
            type: "image",
            url: animeImageUrl,
            caption: caption
        };
        
    } catch (error) {
        log.error(`‚ùå Erreur transformation anime pour ${senderId}: ${error.message}`);
        
        // ‚úÖ Retirer le cooldown en cas d'erreur pour permettre un nouvel essai
        userAnimeRequests.delete(senderIdStr);
        
        let errorMessage = `üíî Oh non ! Transformation √©chou√©e...

üîç Raison possible :
`;
        
        if (error.message.includes('timeout')) {
            errorMessage += `‚è∞ D√©lai d'attente d√©pass√©
üí° L'IA a pris trop de temps
üîÑ R√©essaie dans quelques instants !`;
        } else if (error.message.includes('invalid')) {
            errorMessage += `‚ùå Image invalide ou inaccessible
üí° V√©rifie que l'URL est correcte
üì∏ Ou envoie une nouvelle photo !`;
        } else if (error.message.includes('quota')) {
            errorMessage += `üìä Quota API d√©pass√©
üí° R√©essaie plus tard
üÜì Service gratuit limit√©`;
        } else {
            errorMessage += `ü§ñ Erreur technique temporaire
üí° R√©essaie dans quelques instants
üìß Si le probl√®me persiste, contacte l'admin`;
        }
        
        errorMessage += `\n\nüíï D√©sol√©e pour le d√©sagr√©ment !`;
        
        addToMemory(senderId, 'assistant', 'Erreur transformation anime');
        
        return errorMessage;
    }
};

// ‚úÖ FONCTION: Transformer une image en style anime avec Replicate
async function transformToAnime(imageUrl, log) {
    try {
        log.debug(`üöÄ Appel API Replicate pour: ${imageUrl}`);
        
        // ‚úÖ Cr√©er une pr√©diction
        const createResponse = await axios.post(
            REPLICATE_API_URL,
            {
                version: ANIME_MODEL_VERSION,
                input: {
                    image: imageUrl
                }
            },
            {
                headers: {
                    'Authorization': `Token ${REPLICATE_API_TOKEN}`,
                    'Content-Type': 'application/json'
                },
                timeout: 10000
            }
        );
        
        if (createResponse.status !== 201) {
            throw new Error(`Erreur cr√©ation pr√©diction: ${createResponse.status}`);
        }
        
        const predictionId = createResponse.data.id;
        const getUrl = createResponse.data.urls.get;
        
        log.debug(`üîÆ Pr√©diction cr√©√©e: ${predictionId}`);
        
        // ‚úÖ Attendre que la transformation soit termin√©e (polling)
        let attempts = 0;
        const maxAttempts = 60; // 60 tentatives = 60 secondes max
        let predictionStatus = 'starting';
        let outputUrl = null;
        
        while (attempts < maxAttempts) {
            await sleep(1000); // Attendre 1 seconde entre chaque v√©rification
            attempts++;
            
            try {
                const statusResponse = await axios.get(getUrl, {
                    headers: {
                        'Authorization': `Token ${REPLICATE_API_TOKEN}`
                    },
                    timeout: 10000
                });
                
                predictionStatus = statusResponse.data.status;
                
                log.debug(`üìä Statut (tentative ${attempts}/${maxAttempts}): ${predictionStatus}`);
                
                if (predictionStatus === 'succeeded') {
                    outputUrl = statusResponse.data.output;
                    log.info(`‚úÖ Transformation termin√©e: ${outputUrl}`);
                    break;
                } else if (predictionStatus === 'failed') {
                    const errorMsg = statusResponse.data.error || 'Erreur inconnue';
                    throw new Error(`Transformation √©chou√©e: ${errorMsg}`);
                } else if (predictionStatus === 'canceled') {
                    throw new Error('Transformation annul√©e');
                }
                
                // Statuts interm√©diaires : starting, processing
                
            } catch (statusError) {
                if (attempts >= maxAttempts - 1) {
                    throw statusError;
                }
                // Continuer √† essayer si ce n'est pas la derni√®re tentative
            }
        }
        
        if (!outputUrl) {
            throw new Error(`Timeout: transformation non termin√©e apr√®s ${maxAttempts} secondes`);
        }
        
        return outputUrl;
        
    } catch (error) {
        if (error.response) {
            const status = error.response.status;
            const errorData = error.response.data;
            
            if (status === 401) {
                log.error('‚ùå Token Replicate invalide');
                throw new Error('invalid - Token API invalide');
            } else if (status === 402) {
                log.error('‚ùå Quota Replicate d√©pass√©');
                throw new Error('quota - Quota API d√©pass√©');
            } else if (status === 422) {
                log.error(`‚ùå Image invalide: ${JSON.stringify(errorData)}`);
                throw new Error('invalid - Image non valide ou inaccessible');
            } else {
                log.error(`‚ùå Erreur Replicate ${status}: ${JSON.stringify(errorData)}`);
                throw new Error(`Erreur API ${status}`);
            }
        } else if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {
            log.error('‚ùå Timeout Replicate');
            throw new Error('timeout - D√©lai d\'attente d√©pass√©');
        } else {
            log.error(`‚ùå Erreur transformation: ${error.message}`);
            throw error;
        }
    }
}

// ‚úÖ FONCTION: Valider une URL d'image
function isValidImageUrl(url) {
    if (!url || typeof url !== 'string') {
        return false;
    }
    
    // V√©rifier que c'est une URL valide
    if (!url.startsWith('http://') && !url.startsWith('https://')) {
        return false;
    }
    
    // V√©rifier que c'est une image (optionnel mais recommand√©)
    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp'];
    const urlLower = url.toLowerCase();
    const hasImageExtension = imageExtensions.some(ext => urlLower.includes(ext));
    
    // Accepter aussi les URLs sans extension visible (API, CDN, etc.)
    // Donc on ne fait pas de v√©rification stricte sur l'extension
    
    return true;
}

// ‚úÖ FONCTION: D√©lai (utilitaire)
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// ‚úÖ Nettoyage automatique des cooldowns anciens (plus d'1 heure)
setInterval(() => {
    const now = Date.now();
    const oneHour = 60 * 60 * 1000;
    let cleanedCount = 0;
    
    for (const [userId, timestamp] of userAnimeRequests.entries()) {
        if (now - timestamp > oneHour) {
            userAnimeRequests.delete(userId);
            cleanedCount++;
        }
    }
    
    if (cleanedCount > 0) {
        console.log(`üßπ ${cleanedCount} cooldowns anime nettoy√©s`);
    }
}, 60 * 60 * 1000); // V√©rifier toutes les heures
