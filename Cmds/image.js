/**
 * Commande /image - G√©n√©ration d'images IA avec Pollinations
 * @param {string} senderId - ID de l'utilisateur
 * @param {string} args - Description de l'image √† g√©n√©rer
 * @param {object} ctx - Contexte partag√© du bot
 */

// ‚úÖ Protection anti-spam - Limite de requ√™tes par utilisateur
const userGenerationLocks = new Map();
const COOLDOWN_MS = 5000; // 5 secondes de cooldown entre chaque g√©n√©ration

module.exports = async function cmdImage(senderId, args, ctx) {
    const { addToMemory, getRandomInt, log } = ctx;
    
    // ‚úÖ PROTECTION 1: V√©rifier si l'utilisateur a d√©j√† une g√©n√©ration en cours
    const senderIdStr = String(senderId);
    const now = Date.now();
    
    if (userGenerationLocks.has(senderIdStr)) {
        const lockInfo = userGenerationLocks.get(senderIdStr);
        
        // Si une g√©n√©ration est en cours
        if (lockInfo.generating) {
            log.warning(`‚ö†Ô∏è ${senderId} essaie de g√©n√©rer pendant qu'une g√©n√©ration est en cours`);
            return `‚è≥ Patience ! Je cr√©e ton image pr√©c√©dente ! üíï`;
        }
        
        // Si cooldown pas encore √©coul√©
        const timeSinceLastGen = now - lockInfo.lastGenTime;
        if (timeSinceLastGen < COOLDOWN_MS) {
            const remainingSeconds = Math.ceil((COOLDOWN_MS - timeSinceLastGen) / 1000);
            log.warning(`‚ö†Ô∏è ${senderId} en cooldown (${remainingSeconds}s restant)`);
            return `‚è∞ Attends ${remainingSeconds} seconde${remainingSeconds > 1 ? 's' : ''} ! üíï`;
        }
    }
    
    // ‚úÖ PROTECTION 2: Marquer la g√©n√©ration comme en cours
    userGenerationLocks.set(senderIdStr, {
        generating: true,
        lastGenTime: now
    });
    
    if (!args.trim()) {
        // Lib√©rer le lock si l'utilisateur demande juste l'aide
        userGenerationLocks.set(senderIdStr, {
            generating: false,
            lastGenTime: now
        });
        
        return `üé® Cr√©e des images ! ‚ú®
üñºÔ∏è /image [description]
‚ö° /image random - Surprise !`;
    }
    
    let prompt = args.trim();
    
    // Valider le prompt
    if (prompt.length < 3) {
        // Lib√©rer le lock en cas d'erreur de validation
        userGenerationLocks.set(senderIdStr, {
            generating: false,
            lastGenTime: now
        });
        return "‚ùå Description trop courte ! üíï";
    }
    
    if (prompt.length > 500) {
        // Lib√©rer le lock en cas d'erreur de validation
        userGenerationLocks.set(senderIdStr, {
            generating: false,
            lastGenTime: now
        });
        return "‚ùå Description trop longue ! üå∏";
    }
    
    // Images al√©atoires si demand√©
    if (prompt.toLowerCase() === "random") {
        const randomPrompts = [
            "beautiful fairy garden with sparkling flowers and butterflies",
            "cute magical unicorn in enchanted forest with rainbow",
            "adorable robot princess with jeweled crown in castle",
            "dreamy space goddess floating among stars and galaxies",
            "magical mermaid palace underwater with pearl decorations",
            "sweet vintage tea party with pastel colors and roses",
            "cozy cottagecore house with flower gardens and sunshine",
            "elegant anime girl with flowing dress in cherry blossoms",
            "mystical dragon soaring through aurora borealis",
            "cyberpunk city with neon lights and flying cars"
        ];
        prompt = randomPrompts[Math.floor(Math.random() * randomPrompts.length)];
    }
    
    // Optimiser le prompt pour de meilleurs r√©sultats
    const optimizedPrompt = optimizePromptForImageGeneration(prompt);
    
    try {
        // ‚úÖ Cr√©ation de l'image avec Pollinations
        log.info(`üé® Cr√©ation de l'image pour ${senderId}: ${prompt}`);
        
        const pollinationsResult = await generateWithPollinations(optimizedPrompt, getRandomInt);
        
        if (pollinationsResult && pollinationsResult.success) {
            // Sauvegarder dans la m√©moire
            addToMemory(senderIdStr, 'user', `Image demand√©e: ${prompt}`);
            addToMemory(senderIdStr, 'assistant', `Image cr√©√©e: ${prompt}`);
            
            // ‚úÖ PROTECTION 3: Lib√©rer le lock apr√®s succ√®s
            userGenerationLocks.set(senderIdStr, {
                generating: false,
                lastGenTime: Date.now()
            });
            
            log.info(`üå∏ Image cr√©√©e avec succ√®s pour ${senderId}`);
            
            return {
                type: "image",
                url: pollinationsResult.imageUrl,
                caption: `üé® Image cr√©√©e avec succ√®s ! ‚ú®
üìù "${prompt}"`
            };
        }
        
        throw new Error('Pollinations generation failed');
        
    } catch (pollinationsError) {
        log.error(`‚ùå Erreur g√©n√©ration image ${senderId}: ${pollinationsError.message}`);
        
        // ‚úÖ PROTECTION 4: Lib√©rer le lock m√™me en cas d'√©chec
        userGenerationLocks.set(senderIdStr, {
            generating: false,
            lastGenTime: Date.now()
        });
        
        return `üò¢ Oups ! Probl√®me pour cr√©er l'image ! 
‚è∞ R√©essaie bient√¥t ! üíñ`;
    }
};

// ‚úÖ G√©n√©ration avec Pollinations
async function generateWithPollinations(prompt, getRandomInt) {
    try {
        // Encoder le prompt pour l'URL
        const encodedPrompt = encodeURIComponent(prompt);
        
        // G√©n√©rer avec des param√®tres optimis√©s
        const seed = getRandomInt(100000, 999999);
        const imageUrl = `https://image.pollinations.ai/prompt/${encodedPrompt}?width=768&height=768&seed=${seed}&enhance=true&nologo=true&model=flux`;
        
        return {
            success: true,
            imageUrl: imageUrl
        };
        
    } catch (error) {
        return { success: false, error: error.message };
    }
}

// ‚úÖ Optimisation du prompt pour de meilleurs r√©sultats
function optimizePromptForImageGeneration(prompt) {
    // Nettoyer le prompt
    let optimized = prompt.trim();
    
    // Ajouter des mots-cl√©s pour am√©liorer la qualit√© si n√©cessaire
    const qualityKeywords = ['high quality', 'detailed', 'beautiful', 'artistic', 'masterpiece'];
    const hasQualityKeyword = qualityKeywords.some(keyword => 
        optimized.toLowerCase().includes(keyword)
    );
    
    if (!hasQualityKeyword && optimized.length < 150) {
        optimized += ', high quality, detailed, masterpiece';
    }
    
    return optimized;
}
