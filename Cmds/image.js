/**
 * Commande /image - G√©n√©ration d'images IA (via Pollinations ou √©quivalent)
 * @param {string} senderId - ID de l'utilisateur
 * @param {string} args - Description de l'image √† g√©n√©rer
 * @param {object} ctx - Contexte partag√© du bot
 */

module.exports = async function cmdImage(senderId, args, ctx) {
    const { addToMemory, getRandomInt, log } = ctx;
    
    // ‚úÖ Aide int√©gr√©e
    if (!args.trim()) {
        return `üé® Je peux cr√©er des images magnifiques √† partir de ta description ! ‚ú®
üñºÔ∏è /image [ta description]
üå∏ Exemple : /image paysage f√©erique coucher soleil
‚ö° /image random - Une image surprise !

üí° Donne-moi un maximum de d√©tails pour un rendu parfait !
Styles possibles : r√©aliste, cartoon, anime, artistique... üíï`;
    }

    let prompt = args.trim();
    const senderIdStr = String(senderId);

    // ‚úÖ Mode al√©atoire
    if (prompt.toLowerCase() === "random") {
        const randomPrompts = [
            "beautiful fairy garden with glowing butterflies",
            "cyberpunk city with neon lights and flying cars",
            "cute robot exploring a crystal cave",
            "majestic dragon above snowy mountains",
            "dreamy underwater palace with mermaids",
            "futuristic samurai standing under cherry blossoms",
            "retro cafe in the rain, cinematic lighting",
            "cosmic goddess floating in galaxies",
            "forest spirit surrounded by fireflies",
            "adorable fox in a magical landscape"
        ];
        prompt = randomPrompts[Math.floor(Math.random() * randomPrompts.length)];
    }

    // ‚úÖ V√©rifications du prompt
    if (prompt.length < 3) {
        return "‚ùå Ta description est trop courte ! Donne-moi au moins 3 lettres üíï";
    }
    if (prompt.length > 200) {
        return "‚ùå Ta description est trop longue ! Maximum 200 caract√®res üå∏";
    }

    // ‚úÖ Optimisation du prompt
    const optimizedPrompt = optimizePromptForImage(prompt);

    try {
        // ‚úÖ G√©n√©ration avec Pollinations
        log.info(`üé® G√©n√©ration d'image Pollinations pour ${senderId}: ${optimizedPrompt}`);
        const result = await generateWithPollinations(optimizedPrompt, getRandomInt);

        if (result.success) {
            addToMemory(senderIdStr, 'user', `Image demand√©e: ${prompt}`);
            addToMemory(senderIdStr, 'assistant', `Image g√©n√©r√©e: ${prompt}`);

            return {
                type: "image",
                url: result.imageUrl,
                caption: `üé®`
            };
        }

        throw new Error(result.error || "Erreur inconnue");

    } catch (error) {
        log.error(`‚ùå Erreur g√©n√©ration image ${senderId}: ${error.message}`);
        return `üòÖ Oups ! Mon atelier artistique est un peu surcharg√©...
‚è∞ R√©essaie dans quelques secondes ou tape /image random pour une surprise ! üíï`;
    }
};

// ‚úÖ G√©n√©ration avec Pollinations (API publique)
async function generateWithPollinations(prompt, getRandomInt) {
    try {
        const encodedPrompt = encodeURIComponent(prompt);
        const seed = getRandomInt(100000, 999999);
        const imageUrl = `https://image.pollinations.ai/prompt/${encodedPrompt}?width=768&height=768&seed=${seed}&enhance=true&nologo=true&model=flux`;
        return { success: true, imageUrl, seed };
    } catch (error) {
        return { success: false, error: error.message };
    }
}

// ‚úÖ Optimisation du prompt
function optimizePromptForImage(prompt) {
    let optimized = prompt.trim();

    // Ajouter des mots de qualit√©
    if (!/high quality|detailed|beautiful/i.test(optimized)) {
        optimized += ", high quality, detailed, beautiful lighting";
    }

    // Traduction basique fran√ßais ‚Üí anglais
    const dictionary = {
        'chat': 'cat',
        'chien': 'dog',
        'paysage': 'landscape',
        'femme': 'woman',
        'homme': 'man',
        'fleur': 'flower',
        'maison': 'house',
        'arbre': 'tree',
        'ciel': 'sky',
        'voiture': 'car'
    };
    for (const [fr, en] of Object.entries(dictionary)) {
        optimized = optimized.replace(new RegExp(`\\b${fr}\\b`, 'gi'), en);
    }

    return optimized;
}
