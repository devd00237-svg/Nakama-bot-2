/**
 * Commande /image - G√©n√©ration d'images IA avec AI Horde (Pollinations en fallback)
 * @param {string} senderId - ID de l'utilisateur
 * @param {string} args - Description de l'image √† g√©n√©rer
 * @param {object} ctx - Contexte partag√© du bot
 */
const axios = require("axios");

// Configuration AI Horde
const AI_HORDE_API_URL = "https://stablehorde.net/api/v2";
const AI_HORDE_API_KEY = process.env.AI_HORDE_API_KEY || "MyCjl90bq7fwEaxobqSPHg"; // Cl√© anonyme par d√©faut

// ‚úÖ Protection anti-spam - Limite de requ√™tes par utilisateur
const userGenerationLocks = new Map();
const COOLDOWN_MS = 5000; // 5 secondes de cooldown entre chaque g√©n√©ration

module.exports = async function cmdImage(senderId, args, ctx) {
    const { addToMemory, getRandomInt, log } = ctx;
    
    // ‚úÖ PROTECTION 1: V√©rifier si l'utilisateur a d√©j√† une g√©n√©ration en cours
    const senderIdStr = String(senderId);
    const now = Date.now();
    
    if (userGenerationLocks.has(senderIdStr)) {
        const lockInfo = userGenerationLocks.get(senderIdStr);
        
        // Si une g√©n√©ration est en cours
        if (lockInfo.generating) {
            log.warning(`‚ö†Ô∏è ${senderId} essaie de g√©n√©rer pendant qu'une g√©n√©ration est en cours`);
            return `‚è≥ Patience ! Je cr√©e ton image pr√©c√©dente ! üíï`;
        }
        
        // Si cooldown pas encore √©coul√©
        const timeSinceLastGen = now - lockInfo.lastGenTime;
        if (timeSinceLastGen < COOLDOWN_MS) {
            const remainingSeconds = Math.ceil((COOLDOWN_MS - timeSinceLastGen) / 1000);
            log.warning(`‚ö†Ô∏è ${senderId} en cooldown (${remainingSeconds}s restant)`);
            return `‚è∞ Attends ${remainingSeconds} seconde${remainingSeconds > 1 ? 's' : ''} ! üíï`;
        }
    }
    
    // ‚úÖ PROTECTION 2: Marquer la g√©n√©ration comme en cours
    userGenerationLocks.set(senderIdStr, {
        generating: true,
        lastGenTime: now
    });
    
    if (!args.trim()) {
        // Lib√©rer le lock si l'utilisateur demande juste l'aide
        userGenerationLocks.set(senderIdStr, {
            generating: false,
            lastGenTime: now
        });
        
        return `üé® Cr√©e des images ! ‚ú®
üñºÔ∏è /image [description]
‚ö° /image random - Surprise !`;
    }
    
    let prompt = args.trim();
    
    // Valider le prompt
    if (prompt.length < 3) {
        // Lib√©rer le lock en cas d'erreur de validation
        userGenerationLocks.set(senderIdStr, {
            generating: false,
            lastGenTime: now
        });
        return "‚ùå Description trop courte ! üíï";
    }
    
    if (prompt.length > 500) {
        // Lib√©rer le lock en cas d'erreur de validation
        userGenerationLocks.set(senderIdStr, {
            generating: false,
            lastGenTime: now
        });
        return "‚ùå Description trop longue ! üå∏";
    }
    
    // Images al√©atoires si demand√©
    if (prompt.toLowerCase() === "random") {
        const randomPrompts = [
            "beautiful fairy garden with sparkling flowers and butterflies",
            "cute magical unicorn in enchanted forest with rainbow",
            "adorable robot princess with jeweled crown in castle",
            "dreamy space goddess floating among stars and galaxies",
            "magical mermaid palace underwater with pearl decorations",
            "sweet vintage tea party with pastel colors and roses",
            "cozy cottagecore house with flower gardens and sunshine",
            "elegant anime girl with flowing dress in cherry blossoms",
            "mystical dragon soaring through aurora borealis",
            "cyberpunk city with neon lights and flying cars"
        ];
        prompt = randomPrompts[Math.floor(Math.random() * randomPrompts.length)];
    }
    
    // Optimiser le prompt pour de meilleurs r√©sultats
    const optimizedPrompt = optimizePromptForImageGeneration(prompt);
    
    try {
        // ‚úÖ PRIORIT√â: Essayer d'abord avec AI Horde
        log.info(`üé® Tentative g√©n√©ration AI Horde pour ${senderId}: ${prompt}`);
        
        const hordeResult = await generateWithAIHorde(optimizedPrompt, log);
        
        if (hordeResult && hordeResult.success) {
            // Sauvegarder dans la m√©moire
            addToMemory(senderIdStr, 'user', `Image demand√©e: ${prompt}`);
            addToMemory(senderIdStr, 'assistant', `Image cr√©√©e: ${prompt}`);
            
            // ‚úÖ PROTECTION 3: Lib√©rer le lock apr√®s succ√®s
            userGenerationLocks.set(senderIdStr, {
                generating: false,
                lastGenTime: Date.now()
            });
            
            log.info(`üíé Image AI Horde cr√©√©e avec succ√®s pour ${senderId}`);
            
            return {
                type: "image",
                url: hordeResult.imageUrl,
                caption: `üé® Image cr√©√©e avec succ√®s ! ‚ú®
üìù "${prompt}"`
            };
        }
        
        throw new Error('AI Horde generation failed');
        
    } catch (hordeError) {
        log.warning(`‚ö†Ô∏è AI Horde √©chec pour ${senderId}: ${hordeError.message}`);
        
        try {
            // ‚úÖ FALLBACK: Utiliser Pollinations si AI Horde √©choue
            log.info(`üîÑ Fallback Pollinations pour ${senderId}`);
            
            const pollinationsResult = await generateWithPollinations(optimizedPrompt, getRandomInt);
            
            if (pollinationsResult && pollinationsResult.success) {
                // Sauvegarder dans la m√©moire
                addToMemory(senderIdStr, 'user', `Image demand√©e: ${prompt}`);
                addToMemory(senderIdStr, 'assistant', `Image cr√©√©e: ${prompt}`);
                
                // ‚úÖ PROTECTION 4: Lib√©rer le lock apr√®s succ√®s fallback
                userGenerationLocks.set(senderIdStr, {
                    generating: false,
                    lastGenTime: Date.now()
                });
                
                log.info(`üå∏ Image Pollinations cr√©√©e avec succ√®s pour ${senderId}`);
                
                return {
                    type: "image",
                    url: pollinationsResult.imageUrl,
                    caption: `üé® Image cr√©√©e avec succ√®s ! ‚ú®
üìù "${prompt}"`
                };
            }
            
            throw new Error('Pollinations generation also failed');
            
        } catch (pollinationsError) {
            log.error(`‚ùå Erreur totale g√©n√©ration image ${senderId}: AI Horde(${hordeError.message}) + Pollinations(${pollinationsError.message})`);
            
            // ‚úÖ PROTECTION 5: Lib√©rer le lock m√™me en cas d'√©chec total
            userGenerationLocks.set(senderIdStr, {
                generating: false,
                lastGenTime: Date.now()
            });
            
            return `üò¢ Oups ! Probl√®me pour cr√©er l'image ! 
‚è∞ R√©essaie bient√¥t ! üíñ`;
        }
    }
};

// ‚úÖ Helper pour attendre (sleep)
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// ‚úÖ G√©n√©ration avec AI Horde (Stable Horde)
async function generateWithAIHorde(prompt, log) {
    try {
        const startTime = Date.now();
        
        // √âtape 1: Cr√©er une requ√™te de g√©n√©ration
        const generatePayload = {
            prompt: prompt,
            params: {
                n: 1, // Nombre d'images
                width: 512, // Largeur (512, 768, 1024)
                height: 512, // Hauteur
                steps: 30, // Nombre d'√©tapes (20-50 recommand√©)
                cfg_scale: 7.5, // Guidance scale (7-12 recommand√©)
                sampler_name: "k_euler_a", // Sampler (k_euler_a, k_dpmpp_2m, etc.)
                seed: Math.floor(Math.random() * 4294967295).toString(),
                karras: true,
                denoising_strength: 0.75,
                post_processing: ["RealESRGAN_x4plus"] // Upscaling optionnel
            },
            nsfw: false, // Pas de contenu NSFW
            censor_nsfw: true,
            models: ["Deliberate", "Dreamshaper", "stable_diffusion"] // Mod√®les pr√©f√©r√©s
        };
        
        // Envoyer la requ√™te
        log.info(`üì§ Envoi requ√™te AI Horde...`);
        const generateResponse = await axios.post(
            `${AI_HORDE_API_URL}/generate/async`,
            generatePayload,
            {
                headers: {
                    'Content-Type': 'application/json',
                    'apikey': AI_HORDE_API_KEY
                },
                timeout: 10000 // 10 secondes timeout pour l'envoi
            }
        );
        
        const requestId = generateResponse.data.id;
        log.info(`‚úÖ Requ√™te cr√©√©e avec ID: ${requestId}`);
        
        // √âtape 2: Polling pour v√©rifier le statut
        let attempts = 0;
        const maxAttempts = 60; // Max 2 minutes d'attente (2 secondes x 60)
        
        while (attempts < maxAttempts) {
            await sleep(2000); // Attendre 2 secondes
            
            const checkResponse = await axios.get(
                `${AI_HORDE_API_URL}/generate/check/${requestId}`,
                {
                    headers: { 'apikey': AI_HORDE_API_KEY },
                    timeout: 5000
                }
            );
            
            const status = checkResponse.data;
            log.info(`‚è≥ Statut AI Horde: ${status.done ? 'Termin√©' : `En attente (${status.wait_time}s restant)`}`);
            
            // Si la g√©n√©ration est termin√©e
            if (status.done) {
                // R√©cup√©rer l'image
                const statusResponse = await axios.get(
                    `${AI_HORDE_API_URL}/generate/status/${requestId}`,
                    {
                        headers: { 'apikey': AI_HORDE_API_KEY },
                        timeout: 5000
                    }
                );
                
                const generations = statusResponse.data.generations;
                
                if (generations && generations.length > 0) {
                    const generation = generations[0];
                    const waitTime = Math.round((Date.now() - startTime) / 1000);
                    
                    log.info(`‚úÖ Image AI Horde g√©n√©r√©e en ${waitTime}s`);
                    
                    return {
                        success: true,
                        imageUrl: generation.img
                    };
                }
            }
            
            // Si la requ√™te a √©t√© mise en file d'attente
            if (status.waiting > 0 || status.processing > 0) {
                log.info(`‚è≥ File d'attente: ${status.queue_position || 0} positions, ${status.wait_time || 0}s estim√©s`);
            }
            
            attempts++;
        }
        
        // Timeout apr√®s le nombre max de tentatives
        throw new Error('Timeout: Image generation took too long');
        
    } catch (error) {
        log.error(`‚ùå Erreur AI Horde: ${error.message}`);
        
        if (error.response) {
            log.error(`   Status: ${error.response.status}`);
            log.error(`   Data: ${JSON.stringify(error.response.data)}`);
        }
        
        return { success: false, error: error.message };
    }
}

// ‚úÖ G√©n√©ration avec Pollinations (fallback)
async function generateWithPollinations(prompt, getRandomInt) {
    try {
        // Encoder le prompt pour l'URL
        const encodedPrompt = encodeURIComponent(prompt);
        
        // G√©n√©rer avec des param√®tres optimis√©s
        const seed = getRandomInt(100000, 999999);
        const imageUrl = `https://image.pollinations.ai/prompt/${encodedPrompt}?width=768&height=768&seed=${seed}&enhance=true&nologo=true&model=flux`;
        
        return {
            success: true,
            imageUrl: imageUrl
        };
        
    } catch (error) {
        return { success: false, error: error.message };
    }
}

// ‚úÖ Optimisation du prompt pour de meilleurs r√©sultats
function optimizePromptForImageGeneration(prompt) {
    // Nettoyer le prompt
    let optimized = prompt.trim();
    
    // Ajouter des mots-cl√©s pour am√©liorer la qualit√© si n√©cessaire
    const qualityKeywords = ['high quality', 'detailed', 'beautiful', 'artistic', 'masterpiece'];
    const hasQualityKeyword = qualityKeywords.some(keyword => 
        optimized.toLowerCase().includes(keyword)
    );
    
    if (!hasQualityKeyword && optimized.length < 150) {
        optimized += ', high quality, detailed, masterpiece';
    }
    
    return optimized;
}
