/**
 * Commande ALLDL - T√©l√©chargement universel de m√©dias CORRIG√âE
 * Supporte YouTube, TikTok, Facebook, Instagram, Twitter, etc.
 * Avec syst√®me d'auto-t√©l√©chargement pour les groupes (admin seulement)
 * ‚úÖ CORRECTION: Ajout syst√®me anti-doublons
 * @param {string} senderId - ID de l'utilisateur
 * @param {string} args - URL ou param√®tres (on/off pour auto-download)
 * @param {object} ctx - Contexte du bot
 */

const axios = require('axios');

// Configuration de l'API
const ALLDL_API_URL = 'https://noobs-api.top/dipto/alldl';

// Stockage local des param√®tres d'auto-t√©l√©chargement par utilisateur/groupe
const autoDownloadSettings = new Map();

// ‚úÖ NOUVEAU: Cache pour √©viter les doublons (URL + UserID)
const downloadCache = new Map();
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes en millisecondes

module.exports = async function cmdAllDl(senderId, args, ctx) {
    const { log, sendMessage, sendImageMessage, addToMemory, isAdmin } = ctx;
    const senderIdStr = String(senderId);
    
    try {
        if (!args || !args.trim()) {
            const helpMsg = `üì• **T√©l√©chargeur Universel ALLDL**

üîó **Usage :** \`/alldl [URL]\`

**Plateformes support√©es :**
‚Ä¢ YouTube (vid√©os/shorts)
‚Ä¢ TikTok
‚Ä¢ Facebook
‚Ä¢ Instagram (posts/reels/stories)
‚Ä¢ Twitter/X
‚Ä¢ Et bien d'autres !

**Commandes admin :**
‚Ä¢ \`/alldl on\` - Active l'auto-t√©l√©chargement
‚Ä¢ \`/alldl off\` - D√©sactive l'auto-t√©l√©chargement

üí° **Exemple :** \`/alldl https://www.youtube.com/watch?v=...\`

‚ö†Ô∏è L'auto-t√©l√©chargement permet de t√©l√©charger automatiquement toute URL post√©e (r√©serv√© aux admins).`;

            addToMemory(senderIdStr, 'user', args || '/alldl');
            addToMemory(senderIdStr, 'assistant', helpMsg);
            return helpMsg;
        }

        const command = args.trim().toLowerCase();

        // üîß GESTION DES PARAM√àTRES AUTO-DOWNLOAD (Admin seulement)
        if (command === 'on' || command === 'off') {
            if (!isAdmin(senderId)) {
                const noPermMsg = "üö´ Seuls les administrateurs peuvent modifier l'auto-t√©l√©chargement !";
                addToMemory(senderIdStr, 'user', args);
                addToMemory(senderIdStr, 'assistant', noPermMsg);
                return noPermMsg;
            }

            const isEnabled = command === 'on';
            autoDownloadSettings.set(senderIdStr, isEnabled);
            
            const statusMsg = `üîß Auto-t√©l√©chargement ${isEnabled ? '**activ√©**' : '**d√©sactiv√©**'} pour vous !

${isEnabled ? '‚úÖ Toutes les URLs que vous postez seront automatiquement t√©l√©charg√©es.' : '‚ùå Les URLs ne seront plus t√©l√©charg√©es automatiquement.'}

üí° Tapez \`/alldl ${isEnabled ? 'off' : 'on'}\` pour ${isEnabled ? 'd√©sactiver' : 'activer'}.`;
            
            addToMemory(senderIdStr, 'user', args);
            addToMemory(senderIdStr, 'assistant', statusMsg);
            log.info(`üîß Auto-download ${isEnabled ? 'activ√©' : 'd√©sactiv√©'} pour ${senderId}`);
            return statusMsg;
        }

        // üîç VALIDATION DE L'URL
        const url = args.trim();
        
        if (!isValidUrl(url)) {
            const invalidMsg = `‚ùå URL invalide ! 

üìù **Format attendu :** \`https://...\`

**Exemples valides :**
‚Ä¢ \`https://www.youtube.com/watch?v=dQw4w9WgXcQ\`
‚Ä¢ \`https://www.tiktok.com/@user/video/123456\`
‚Ä¢ \`https://www.instagram.com/p/ABC123/\`
‚Ä¢ \`https://www.facebook.com/watch/?v=123456789\`

üí° Astuce : Copiez-collez directement l'URL depuis votre navigateur !`;

            addToMemory(senderIdStr, 'user', args);
            addToMemory(senderIdStr, 'assistant', invalidMsg);
            return invalidMsg;
        }

        // ‚úÖ NOUVEAU: V√©rification des doublons
        const cacheKey = `${senderIdStr}_${url}`;
        const now = Date.now();
        
        // Nettoyer le cache des entr√©es expir√©es
        cleanExpiredCache();
        
        if (downloadCache.has(cacheKey)) {
            const cacheEntry = downloadCache.get(cacheKey);
            const timeElapsed = now - cacheEntry.timestamp;
            const remainingTime = Math.ceil((CACHE_DURATION - timeElapsed) / 1000);
            
            if (timeElapsed < CACHE_DURATION) {
                const duplicateMsg = `üîÑ **T√©l√©chargement r√©cent d√©tect√© !**

‚ö†Ô∏è Vous avez d√©j√† t√©l√©charg√© cette vid√©o il y a ${Math.floor(timeElapsed / 1000)} secondes.

üé¨ **Vid√©o :** ${cacheEntry.title || 'Titre non disponible'}
üîó **URL :** ${url.length > 60 ? url.substring(0, 60) + '...' : url}

‚è±Ô∏è Vous pourrez la t√©l√©charger √† nouveau dans **${remainingTime} secondes**.

üí° Ceci √©vite les t√©l√©chargements en double et pr√©serve les ressources du serveur.`;

                log.info(`üîÑ Doublon √©vit√© pour ${senderId}: ${url.substring(0, 50)}...`);
                addToMemory(senderIdStr, 'user', args);
                addToMemory(senderIdStr, 'assistant', duplicateMsg);
                return duplicateMsg;
            }
        }

        // üöÄ T√âL√âCHARGEMENT
        log.info(`üì• D√©but t√©l√©chargement pour ${senderId}: ${url.substring(0, 50)}...`);
        
        const downloadingMsg = `‚è≥ **T√©l√©chargement en cours...**

üîó URL: ${url.length > 80 ? url.substring(0, 80) + '...' : url}
üé¨ Plateforme: ${extractDomain(url)}

üí° Cela peut prendre quelques secondes selon la taille du m√©dia...`;

        // Envoyer le message de chargement d'abord
        addToMemory(senderIdStr, 'user', args);
        await sendMessage(senderId, downloadingMsg);

        try {
            // üì° APPEL √Ä L'API ALLDL
            const apiUrl = `${ALLDL_API_URL}?url=${encodeURIComponent(url)}`;
            log.debug(`üì° Appel API ALLDL: ${apiUrl}`);

            const response = await axios.get(apiUrl, { 
                timeout: 60000, // 60 secondes pour les gros fichiers
                maxRedirects: 5,
                validateStatus: function (status) {
                    return status >= 200 && status < 500; // Accepter m√™me les 4xx pour gestion personnalis√©e
                }
            });

            log.debug(`üìä R√©ponse API: Status ${response.status}, Data: ${JSON.stringify(response.data)}`);

            // ‚úÖ NOUVELLE LOGIQUE: V√©rification am√©lior√©e de la r√©ponse
            if (!response.data || response.status !== 200) {
                throw new Error(`API a retourn√© le statut ${response.status}`);
            }

            const mediaData = response.data;
            
            // ‚úÖ CORRECTION: V√©rifier diff√©rentes structures de r√©ponse possibles
            let mediaUrl = null;
            let title = null;
            let author = null;
            let thumbnail = null;
            let duration = null;

            // Structure principale: {result: "url", Title: "...", author: "..."}
            if (mediaData.result) {
                mediaUrl = mediaData.result;
                title = mediaData.Title || mediaData.title || null;
                author = mediaData.author || null;
                thumbnail = mediaData.thumbnail || null;
                duration = mediaData.duration || null;
            }
            // Structure alternative: {url: "...", title: "..."}
            else if (mediaData.url) {
                mediaUrl = mediaData.url;
                title = mediaData.title || mediaData.Title || null;
                author = mediaData.author || null;
            }
            // Structure directe avec m√©dias multiples
            else if (mediaData.medias && mediaData.medias.length > 0) {
                mediaUrl = mediaData.medias[0].url;
                title = mediaData.title || null;
            }
            // Erreur dans la r√©ponse API
            else if (mediaData.error || mediaData.message) {
                throw new Error(mediaData.error || mediaData.message || 'Erreur API non sp√©cifi√©e');
            }

            if (!mediaUrl) {
                log.error(`‚ùå Aucune URL de m√©dia trouv√©e dans la r√©ponse: ${JSON.stringify(mediaData)}`);
                throw new Error('URL du m√©dia introuvable dans la r√©ponse de l\'API');
            }

            // ‚úÖ VALIDATION DE L'URL DU M√âDIA
            if (!isValidUrl(mediaUrl)) {
                log.error(`‚ùå URL de m√©dia invalide: ${mediaUrl}`);
                throw new Error('L\'API a retourn√© une URL de m√©dia invalide');
            }

            log.info(`‚úÖ M√©dia URL obtenue: ${mediaUrl.substring(0, 100)}...`);

            // ‚úÖ NOUVEAU: Ajouter au cache AVANT l'envoi
            downloadCache.set(cacheKey, {
                timestamp: now,
                title: title,
                mediaUrl: mediaUrl,
                author: author
            });

            // üé¨ PR√âPARATION DU MESSAGE DE R√âSULTAT
            let resultMessage = `‚úÖ **T√©l√©chargement termin√© !**\n\n`;
            
            if (title) {
                // Nettoyer le titre (enlever les caract√®res sp√©ciaux probl√©matiques)
                const cleanTitle = title.replace(/[^\w\s\-\.,!?()]/g, '').substring(0, 100);
                resultMessage += `üìΩÔ∏è **Titre :** ${cleanTitle}\n`;
            }
            
            if (author) {
                const cleanAuthor = author.replace(/[^\w\s\-\.,!?()]/g, '').substring(0, 50);
                resultMessage += `üë§ **Auteur :** ${cleanAuthor}\n`;
            }
            
            if (duration) {
                resultMessage += `‚è±Ô∏è **Dur√©e :** ${duration}\n`;
            }
            
            resultMessage += `üîó **Source :** ${extractDomain(url)}\n`;
            resultMessage += `üì± **Demand√© par :** User ${senderId}\n\n`;
            resultMessage += `üíï **T√©l√©charg√© avec amour par NakamaBot !**`;

            // üöÄ T√âL√âCHARGEMENT ET ENVOI DU M√âDIA
            log.info(`üì§ Tentative d'envoi du m√©dia...`);
            
            try {
                // Premier essai: Envoyer comme vid√©o
                const videoResult = await sendVideoMessage(senderId, mediaUrl, resultMessage);
                
                if (videoResult.success) {
                    addToMemory(senderIdStr, 'assistant', resultMessage);
                    log.info(`‚úÖ Vid√©o t√©l√©charg√©e avec succ√®s pour ${senderId}`);
                    return { type: 'media_sent', success: true };
                } else {
                    log.warning(`‚ö†Ô∏è √âchec envoi vid√©o, tentative image...`);
                    
                    // Deuxi√®me essai: Envoyer comme image
                    const imageResult = await sendImageMessage(senderId, mediaUrl, resultMessage);
                    
                    if (imageResult.success) {
                        addToMemory(senderIdStr, 'assistant', resultMessage);
                        log.info(`‚úÖ Image t√©l√©charg√©e avec succ√®s pour ${senderId}`);
                        return { type: 'media_sent', success: true };
                    } else {
                        throw new Error('Impossible d\'envoyer le m√©dia ni en vid√©o ni en image');
                    }
                }
            } catch (sendError) {
                log.error(`‚ùå Erreur envoi m√©dia: ${sendError.message}`);
                
                // ‚úÖ FALLBACK: Envoyer le lien direct si l'envoi √©choue
                const fallbackMsg = `üìé **Lien de t√©l√©chargement direct :**

üîó ${mediaUrl}

${title ? `üìΩÔ∏è **Titre :** ${title}\n` : ''}${author ? `üë§ **Auteur :** ${author}\n` : ''}
üì± Cliquez sur le lien pour t√©l√©charger le m√©dia directement !

üí° **Astuce :** Le lien se t√©l√©chargera automatiquement quand vous cliquez dessus.

üíï **Pr√©par√© avec amour par NakamaBot !**`;

                addToMemory(senderIdStr, 'assistant', fallbackMsg);
                return fallbackMsg;
            }

        } catch (apiError) {
            log.error(`‚ùå Erreur API ALLDL: ${apiError.message}`);
            
            // ‚úÖ NOUVEAU: Supprimer du cache en cas d'erreur
            downloadCache.delete(cacheKey);
            
            // ‚úÖ MESSAGES D'ERREUR AM√âLIOR√âS ET PLUS SP√âCIFIQUES
            let errorMsg = "‚ùå **√âchec du t√©l√©chargement**\n\n";
            
            if (apiError.response?.status === 404) {
                errorMsg += "üö´ **Erreur :** M√©dia introuvable ou URL invalide\n";
                errorMsg += "üí° **Solutions possibles :**\n";
                errorMsg += "   ‚Ä¢ V√©rifiez que l'URL est correcte et compl√®te\n";
                errorMsg += "   ‚Ä¢ Assurez-vous que le contenu est public\n";
                errorMsg += "   ‚Ä¢ R√©essayez avec une URL diff√©rente";
            } else if (apiError.response?.status === 403) {
                errorMsg += "üîí **Erreur :** Acc√®s refus√© (contenu priv√© ou g√©o-restreint)\n";
                errorMsg += "üí° **Solutions possibles :**\n";
                errorMsg += "   ‚Ä¢ Le contenu est peut-√™tre priv√©\n";
                errorMsg += "   ‚Ä¢ Il pourrait √™tre g√©o-restreint\n";
                errorMsg += "   ‚Ä¢ Essayez avec un autre contenu public";
            } else if (apiError.code === 'ECONNABORTED' || apiError.message.includes('timeout')) {
                errorMsg += "‚è∞ **Erreur :** D√©lai d'attente d√©pass√©\n";
                errorMsg += "üí° **Solutions possibles :**\n";
                errorMsg += "   ‚Ä¢ Le fichier est trop volumineux\n";
                errorMsg += "   ‚Ä¢ Le serveur est temporairement lent\n";
                errorMsg += "   ‚Ä¢ R√©essayez dans quelques minutes";
            } else if (apiError.response?.status >= 500) {
                errorMsg += "üîß **Erreur :** Probl√®me serveur temporaire\n";
                errorMsg += "üí° **Solutions possibles :**\n";
                errorMsg += "   ‚Ä¢ Les serveurs de t√©l√©chargement sont occup√©s\n";
                errorMsg += "   ‚Ä¢ R√©essayez dans 5-10 minutes\n";
                errorMsg += "   ‚Ä¢ Le service pourrait √™tre en maintenance";
            } else if (apiError.message.includes('API a retourn√© le statut')) {
                errorMsg += `üêõ **Erreur API :** ${apiError.message}\n`;
                errorMsg += "üí° **Solutions possibles :**\n";
                errorMsg += "   ‚Ä¢ L'API de t√©l√©chargement a un probl√®me temporaire\n";
                errorMsg += "   ‚Ä¢ R√©essayez dans quelques minutes\n";
                errorMsg += "   ‚Ä¢ V√©rifiez que l'URL est support√©e";
            } else {
                errorMsg += `üêõ **Erreur technique :** ${apiError.message}\n`;
                errorMsg += "üí° **Solutions possibles :**\n";
                errorMsg += "   ‚Ä¢ V√©rifiez que l'URL est correcte\n";
                errorMsg += "   ‚Ä¢ R√©essayez dans quelques minutes\n";
                errorMsg += "   ‚Ä¢ Contactez l'admin si le probl√®me persiste";
            }
            
            errorMsg += `\nüîó **URL test√©e :** ${url.length > 60 ? url.substring(0, 60) + '...' : url}`;
            errorMsg += `\nüé¨ **Plateforme :** ${extractDomain(url)}`;
            errorMsg += "\n\nüÜò Tapez `/help` si vous avez besoin d'aide !";

            addToMemory(senderIdStr, 'assistant', errorMsg);
            return errorMsg;
        }

    } catch (error) {
        log.error(`‚ùå Erreur g√©n√©rale alldl pour ${senderId}: ${error.message}`);
        
        const generalErrorMsg = `üí• **Oups ! Erreur inattendue**

üêõ Une petite erreur technique s'est produite...

**Solutions possibles :**
‚Ä¢ V√©rifiez que votre URL est compl√®te et correcte
‚Ä¢ R√©essayez dans quelques instants  
‚Ä¢ Assurez-vous que le contenu est public
‚Ä¢ Contactez l'admin si le probl√®me persiste

üîó **URL :** ${args ? args.substring(0, 60) + '...' : 'Non fournie'}

üíï D√©sol√©e pour ce petit d√©sagr√©ment ! Je fais de mon mieux pour vous aider !`;

        addToMemory(senderIdStr, 'assistant', generalErrorMsg);
        return generalErrorMsg;
    }
};

// === FONCTIONS UTILITAIRES AM√âLIOR√âES ===

/**
 * ‚úÖ NOUVEAU: Nettoyer le cache des entr√©es expir√©es
 */
function cleanExpiredCache() {
    const now = Date.now();
    const expiredKeys = [];
    
    for (const [key, entry] of downloadCache.entries()) {
        if (now - entry.timestamp > CACHE_DURATION) {
            expiredKeys.push(key);
        }
    }
    
    expiredKeys.forEach(key => downloadCache.delete(key));
    
    if (expiredKeys.length > 0) {
        console.log(`üßπ Cache nettoy√©: ${expiredKeys.length} entr√©es expir√©es supprim√©es`);
    }
}

/**
 * ‚úÖ NOUVEAU: Obtenir les statistiques du cache
 */
function getCacheStats() {
    const now = Date.now();
    let activeEntries = 0;
    let expiredEntries = 0;
    
    for (const [key, entry] of downloadCache.entries()) {
        if (now - entry.timestamp <= CACHE_DURATION) {
            activeEntries++;
        } else {
            expiredEntries++;
        }
    }
    
    return {
        total: downloadCache.size,
        active: activeEntries,
        expired: expiredEntries
    };
}

/**
 * Valide si une cha√Æne est une URL valide
 * @param {string} string - Cha√Æne √† valider
 * @returns {boolean} - True si URL valide
 */
function isValidUrl(string) {
    if (!string || typeof string !== 'string') return false;
    
    try {
        const url = new URL(string);
        return url.protocol === 'http:' || url.protocol === 'https:';
    } catch (_) {
        return false;
    }
}

/**
 * Extrait le domaine d'une URL avec ic√¥nes
 * @param {string} url - URL compl√®te
 * @returns {string} - Nom du domaine avec ic√¥ne
 */
function extractDomain(url) {
    try {
        const urlObj = new URL(url);
        let domain = urlObj.hostname.toLowerCase();
        
        // Simplifier les domaines connus avec ic√¥nes appropri√©es
        if (domain.includes('youtube.com') || domain.includes('youtu.be')) {
            return 'üî¥ YouTube';
        } else if (domain.includes('tiktok.com')) {
            return 'üéµ TikTok';
        } else if (domain.includes('instagram.com')) {
            return 'üì∏ Instagram';
        } else if (domain.includes('facebook.com') || domain.includes('fb.watch')) {
            return 'üìò Facebook';
        } else if (domain.includes('twitter.com') || domain.includes('x.com')) {
            return 'üê¶ Twitter/X';
        } else if (domain.includes('snapchat.com')) {
            return 'üëª Snapchat';
        } else if (domain.includes('pinterest.com')) {
            return 'üìå Pinterest';
        } else if (domain.includes('linkedin.com')) {
            return 'üíº LinkedIn';
        } else if (domain.includes('reddit.com')) {
            return 'ü§ñ Reddit';
        } else if (domain.includes('twitch.tv')) {
            return 'üéÆ Twitch';
        } else {
            return 'üåê ' + domain.replace('www.', '');
        }
    } catch (error) {
        return 'üåê Site inconnu';
    }
}

/**
 * ‚úÖ NOUVELLE FONCTION: Envoyer une vid√©o avec gestion d'erreur am√©lior√©e
 * @param {string} recipientId - ID du destinataire
 * @param {string} videoUrl - URL de la vid√©o
 * @param {string} caption - L√©gende
 * @returns {object} - R√©sultat de l'envoi
 */
async function sendVideoMessage(recipientId, videoUrl, caption = "") {
    // Cette fonction devrait √™tre d√©finie dans le contexte, mais on va l'√©muler
    const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN;
    
    if (!PAGE_ACCESS_TOKEN) {
        return { success: false, error: "No token" };
    }
    
    const data = {
        recipient: { id: String(recipientId) },
        message: {
            attachment: {
                type: "video",
                payload: {
                    url: videoUrl,
                    is_reusable: true
                }
            }
        }
    };
    
    try {
        const axios = require('axios');
        const response = await axios.post(
            "https://graph.facebook.com/v18.0/me/messages",
            data,
            {
                params: { access_token: PAGE_ACCESS_TOKEN },
                timeout: 30000 // 30 secondes pour les vid√©os
            }
        );
        
        if (response.status === 200) {
            // Envoyer la l√©gende s√©par√©ment si fournie
            if (caption && typeof sendMessage === 'function') {
                await new Promise(resolve => setTimeout(resolve, 1000)); // Attendre 1s
                return await sendMessage(recipientId, caption);
            }
            return { success: true };
        } else {
            return { success: false, error: `API Error ${response.status}` };
        }
    } catch (error) {
        return { success: false, error: error.message };
    }
}

// === AUTO-DOWNLOAD HANDLER AM√âLIOR√â ===

/**
 * Fonction pour g√©rer l'auto-t√©l√©chargement (√† int√©grer dans le syst√®me de messages)
 * @param {string} senderId - ID de l'utilisateur
 * @param {string} messageText - Texte du message
 * @param {object} ctx - Contexte
 */
async function handleAutoDownload(senderId, messageText, ctx) {
    const senderIdStr = String(senderId);
    
    // V√©rifier si l'auto-download est activ√© pour cet utilisateur
    if (!autoDownloadSettings.get(senderIdStr)) return false;
    
    // Chercher des URLs dans le message (regex am√©lior√©e)
    const urlRegex = /(https?:\/\/(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/|tiktok\.com\/@[\w.-]+\/video\/|instagram\.com\/(?:p|reel)\/|facebook\.com\/watch\/\?v=|fb\.watch\/|twitter\.com\/[\w]+\/status\/|x\.com\/[\w]+\/status\/)[\w.-]+(?:\S+)?)/gi;
    const urls = messageText.match(urlRegex);
    
    if (urls && urls.length > 0) {
        const url = urls[0]; // Prendre la premi√®re URL trouv√©e
        
        try {
            ctx.log.info(`ü§ñ Auto-t√©l√©chargement d√©clench√© pour ${senderId}: ${url.substring(0, 50)}...`);
            
            // Ex√©cuter la commande alldl automatiquement
            await module.exports(senderId, url, ctx);
            return true;
        } catch (error) {
            ctx.log.warning(`‚ö†Ô∏è Erreur auto-download pour ${senderId}: ${error.message}`);
        }
    }
    
    return false;
}

// Export des fonctions utilitaires
module.exports.handleAutoDownload = handleAutoDownload;
module.exports.autoDownloadSettings = autoDownloadSettings;
module.exports.isValidUrl = isValidUrl;
module.exports.downloadCache = downloadCache; // ‚úÖ NOUVEAU: Export du cache pour debug
module.exports.getCacheStats = getCacheStats; // ‚úÖ NOUVEAU: Export des stats
module.exports.cleanExpiredCache = cleanExpiredCache; // ‚úÖ NOUVEAU: Export du nettoyage
