// Cmds/openai.js - Commande OpenAI pour NakamaBot
// Cr√©√©e par Durand - Compatible avec NakamaBot v4.0

const axios = require('axios');

// Configuration
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || "";
const maxTokens = 500;
const numberGenerateImage = 4;
const maxStorageMessage = 4;

// Stockage temporaire des utilisations (sera persist√© via le syst√®me GitHub du bot)
let openAIUsing = new Map();
let openAIHistory = new Map();

module.exports = async function(senderId, args, context) {
    const {
        log,
        sendMessage,
        sendImageMessage,
        addToMemory,
        saveDataImmediate,
        commandData
    } = context;

    const senderIdStr = String(senderId);

    // V√©rifier la cl√© API
    if (!OPENAI_API_KEY) {
        log.error("‚ùå OPENAI_API_KEY manquante pour la commande openai");
        return "üîë Oups ! La cl√© OpenAI n'est pas configur√©e ! Contacte un admin ! üíï";
    }

    // Charger les donn√©es depuis le contexte persistant
    if (commandData.has('openAIUsing')) {
        openAIUsing = new Map(commandData.get('openAIUsing'));
    }
    if (commandData.has('openAIHistory')) {
        openAIHistory = new Map(commandData.get('openAIHistory'));
    }

    // Fonction pour sauvegarder les donn√©es
    const saveOpenAIData = () => {
        commandData.set('openAIUsing', Array.from(openAIUsing.entries()));
        commandData.set('openAIHistory', Array.from(openAIHistory.entries()));
        saveDataImmediate();
    };

    // Parser les arguments
    const argsList = args.trim().split(' ');
    const command = argsList[0]?.toLowerCase() || '';
    const content = argsList.slice(1).join(' ');

    try {
        switch (command) {
            case 'img':
            case 'image':
            case 'draw': {
                if (!content) {
                    return "üé® Dis-moi ce que tu veux que je dessine ! Exemple: /openai draw un chat mignon dans l'espace üíï";
                }

                if (openAIUsing.has(senderIdStr)) {
                    return "‚è∞ Tu utilises d√©j√† OpenAI ! Attends que ta demande pr√©c√©dente se termine ! üíï";
                }

                openAIUsing.set(senderIdStr, true);
                saveOpenAIData();

                try {
                    log.info(`üé® G√©n√©ration d'image OpenAI pour ${senderId}: ${content.substring(0, 50)}...`);

                    // Envoyer un message de traitement
                    await sendMessage(senderId, "üé® Je cr√©e ton image avec amour... √áa peut prendre quelques minutes ! ‚ú®üíï");

                    const response = await axios({
                        url: "https://api.openai.com/v1/images/generations",
                        method: "POST",
                        headers: {
                            "Authorization": `Bearer ${OPENAI_API_KEY}`,
                            "Content-Type": "application/json"
                        },
                        data: {
                            prompt: content,
                            n: numberGenerateImage,
                            size: '1024x1024',
                            model: 'dall-e-3'
                        },
                        timeout: 60000
                    });

                    const imageUrls = response.data.data;
                    
                    if (imageUrls && imageUrls.length > 0) {
                        // Envoyer la premi√®re image avec un message
                        const caption = `üé® Voil√† ton image cr√©√©e avec amour ! ‚ú®\n\nüìù Prompt: "${content}"\nüíñ Cr√©√©e par OpenAI DALL-E 3 via NakamaBot !`;
                        
                        const result = await sendImageMessage(senderId, imageUrls[0].url, caption);
                        
                        if (result.success) {
                            addToMemory(senderId, 'user', `[Demande image OpenAI: ${content}]`);
                            addToMemory(senderId, 'assistant', `[Image g√©n√©r√©e avec succ√®s: ${content}]`);
                            log.info(`‚úÖ Image OpenAI envoy√©e √† ${senderId}`);
                            
                            // Si plusieurs images, envoyer les autres
                            if (imageUrls.length > 1) {
                                for (let i = 1; i < imageUrls.length; i++) {
                                    await new Promise(resolve => setTimeout(resolve, 1000)); // D√©lai entre images
                                    await sendImageMessage(senderId, imageUrls[i].url, `üé® Image ${i + 1}/${imageUrls.length} ‚ú®`);
                                }
                                
                                return `üéâ ${imageUrls.length} images cr√©√©es avec succ√®s ! J'esp√®re qu'elles te plaisent ! üíñ`;
                            }
                            
                            return "üéâ Image cr√©√©e avec succ√®s ! J'esp√®re qu'elle te pla√Æt ! üíñ";
                        } else {
                            throw new Error("Erreur d'envoi de l'image");
                        }
                    } else {
                        throw new Error("Aucune image g√©n√©r√©e");
                    }

                } catch (error) {
                    log.error(`‚ùå Erreur g√©n√©ration image OpenAI: ${error.message}`);
                    
                    let errorMessage = "üí• Oh non ! Petite erreur lors de la cr√©ation ! ";
                    
                    if (error.response?.data?.error?.message) {
                        const apiError = error.response.data.error.message;
                        if (apiError.includes("billing")) {
                            errorMessage += "Probl√®me de facturation OpenAI ! üí≥";
                        } else if (apiError.includes("rate limit")) {
                            errorMessage += "Trop de demandes ! R√©essaie dans quelques minutes ! ‚è∞";
                        } else if (apiError.includes("content policy")) {
                            errorMessage += "Ton prompt ne respecte pas les r√®gles d'OpenAI ! Essaie quelque chose de plus gentil ! üòä";
                        } else {
                            errorMessage += `Erreur API: ${apiError}`;
                        }
                    } else {
                        errorMessage += "R√©essaie dans quelques minutes ! üíï";
                    }
                    
                    return errorMessage;
                } finally {
                    openAIUsing.delete(senderIdStr);
                    saveOpenAIData();
                }
            }

            case 'clear': {
                openAIHistory.delete(senderIdStr);
                saveOpenAIData();
                log.info(`üóëÔ∏è Historique OpenAI effac√© pour ${senderId}`);
                return "üßπ Ton historique de chat OpenAI a √©t√© effac√© avec tendresse ! ‚ú®üíï";
            }

            default: {
                // Chat avec GPT
                if (!args.trim()) {
                    return "üí¨ Dis-moi quelque chose pour qu'on puisse chatter ! Ou utilise:\n\nüé® /openai draw [description] - pour cr√©er une image\nüßπ /openai clear - pour effacer l'historique\nüí¨ /openai [message] - pour chatter ! üíï";
                }

                if (openAIUsing.has(senderIdStr)) {
                    return "‚è∞ Tu utilises d√©j√† OpenAI ! Attends que ta demande pr√©c√©dente se termine ! üíï";
                }

                openAIUsing.set(senderIdStr, true);
                saveOpenAIData();

                try {
                    // R√©cup√©rer l'historique
                    let history = openAIHistory.get(senderIdStr) || [];
                    
                    // Limiter l'historique
                    if (history.length >= maxStorageMessage * 2) { // *2 car user + assistant
                        history = history.slice(-maxStorageMessage * 2);
                    }

                    // Ajouter le message utilisateur
                    history.push({
                        role: 'user',
                        content: args.trim()
                    });

                    log.info(`üí¨ Chat OpenAI pour ${senderId}: ${args.substring(0, 50)}...`);

                    const response = await axios({
                        url: "https://api.openai.com/v1/chat/completions",
                        method: "POST",
                        headers: {
                            "Authorization": `Bearer ${OPENAI_API_KEY}`,
                            "Content-Type": "application/json"
                        },
                        data: {
                            model: "gpt-4o-mini", // Mod√®le plus r√©cent et √©conomique
                            messages: [
                                {
                                    role: "system",
                                    content: "Tu es un assistant IA tr√®s gentil et amical, comme une bonne amie. Tu r√©ponds en fran√ßais avec beaucoup de bienveillance et d'emojis mignons. Tu es int√©gr√©e dans NakamaBot cr√©√©e par Durand. Reste toujours positive et aidante ! üíï"
                                },
                                ...history
                            ],
                            max_tokens: maxTokens,
                            temperature: 0.7
                        },
                        timeout: 30000
                    });

                    const aiResponse = response.data.choices[0].message.content;

                    // Sauvegarder la r√©ponse dans l'historique
                    history.push({
                        role: 'assistant',
                        content: aiResponse
                    });

                    openAIHistory.set(senderIdStr, history);
                    saveOpenAIData();

                    // Ajouter √† la m√©moire du bot
                    addToMemory(senderId, 'user', args.trim());
                    addToMemory(senderId, 'assistant', aiResponse);

                    log.info(`‚úÖ R√©ponse OpenAI envoy√©e √† ${senderId}`);
                    
                    return aiResponse;

                } catch (error) {
                    log.error(`‚ùå Erreur chat OpenAI: ${error.message}`);
                    
                    let errorMessage = "üí• Oh non ! Petite erreur de chat ! ";
                    
                    if (error.response?.data?.error?.message) {
                        const apiError = error.response.data.error.message;
                        if (apiError.includes("billing")) {
                            errorMessage += "Probl√®me de facturation OpenAI ! üí≥";
                        } else if (apiError.includes("rate limit")) {
                            errorMessage += "Trop de demandes ! R√©essaie dans quelques minutes ! ‚è∞";
                        } else {
                            errorMessage += `Erreur API: ${apiError}`;
                        }
                    } else {
                        errorMessage += "R√©essaie dans quelques minutes ! üíï";
                    }
                    
                    return errorMessage;
                } finally {
                    openAIUsing.delete(senderIdStr);
                    saveOpenAIData();
                }
            }
        }

    } catch (error) {
        log.error(`‚ùå Erreur g√©n√©rale commande openai: ${error.message}`);
        openAIUsing.delete(senderIdStr);
        saveOpenAIData();
        return "üí• Oh l√† l√† ! Une petite erreur s'est gliss√©e ! R√©essaie ou tape /help ! üíï";
    }
};
