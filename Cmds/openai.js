// Cmds/chatanywhere.js - Commande ChatAnywhere pour NakamaBot
// Cr√©√©e par Durand - Compatible avec NakamaBot v4.0

const axios = require('axios');

// Configuration
const CHATANYWHERE_API_KEY ="sk-inwU3k9uYuOsxdjrz6QDFSJZ8H9wykCZUuRqWOUOiDXYUMlA";
const maxTokens = 1000;
const maxStorageMessage = 6;
const defaultModel = "gpt-4o-ca"; // Mod√®le par d√©faut depuis la liste fournie

// Stockage temporaire des utilisations (sera persist√© via le syst√®me GitHub du bot)
let chatAnywhereUsing = new Map();
let chatAnywhereHistory = new Map();

module.exports = async function(senderId, args, context) {
    const {
        log,
        sendMessage,
        addToMemory,
        saveDataImmediate,
        commandData
    } = context;

    const senderIdStr = String(senderId);

    // V√©rifier la cl√© API
    if (!CHATANYWHERE_API_KEY) {
        log.error("‚ùå CHATANYWHERE_API_KEY manquante pour la commande chatanywhere");
        return "üîë Oups ! La cl√© ChatAnywhere n'est pas configur√©e ! Contacte un admin ! üíï";
    }

    // Charger les donn√©es depuis le contexte persistant
    if (commandData.has('chatAnywhereUsing')) {
        chatAnywhereUsing = new Map(commandData.get('chatAnywhereUsing'));
    }
    if (commandData.has('chatAnywhereHistory')) {
        chatAnywhereHistory = new Map(commandData.get('chatAnywhereHistory'));
    }

    // Fonction pour sauvegarder les donn√©es
    const saveChatAnywhereData = () => {
        commandData.set('chatAnywhereUsing', Array.from(chatAnywhereUsing.entries()));
        commandData.set('chatAnywhereHistory', Array.from(chatAnywhereHistory.entries()));
        saveDataImmediate();
    };

    // Parser les arguments
    const argsList = args.trim().split(' ');
    const command = argsList[0]?.toLowerCase() || '';
    const content = argsList.slice(1).join(' ');

    try {
        switch (command) {
            case 'models':
            case 'modeles': {
                if (chatAnywhereUsing.has(senderIdStr)) {
                    return "‚è∞ Tu utilises d√©j√† ChatAnywhere ! Attends que ta demande pr√©c√©dente se termine ! üíï";
                }

                chatAnywhereUsing.set(senderIdStr, true);
                saveChatAnywhereData();

                try {
                    log.info(`üìã Liste des mod√®les ChatAnywhere pour ${senderId}`);

                    const response = await axios({
                        url: "https://api.chatanywhere.tech/v1/models",
                        method: "GET",
                        headers: {
                            "Authorization": `Bearer ${CHATANYWHERE_API_KEY}`
                        },
                        timeout: 15000
                    });

                    const models = response.data.data;
                    
                    if (models && models.length > 0) {
                        let modelsList = "ü§ñ **Mod√®les disponibles sur ChatAnywhere :**\n\n";
                        
                        models.forEach((model, index) => {
                            const modelName = model.id;
                            const owner = model.owned_by;
                            modelsList += `${index + 1}. **${modelName}** (${owner})\n`;
                        });
                        
                        modelsList += `\nüí° Utilise: \`/chatanywhere model [nom_modele] [message]\` pour chatter avec un mod√®le sp√©cifique !\n`;
                        modelsList += `üéØ Mod√®le par d√©faut: **${defaultModel}**`;
                        
                        log.info(`‚úÖ Liste des mod√®les ChatAnywhere envoy√©e √† ${senderId}`);
                        return modelsList;
                    } else {
                        return "üòÖ Aucun mod√®le trouv√© ! Contacte un admin ! üíï";
                    }

                } catch (error) {
                    log.error(`‚ùå Erreur liste mod√®les ChatAnywhere: ${error.message}`);
                    
                    let errorMessage = "üí• Oh non ! Erreur lors de la r√©cup√©ration des mod√®les ! ";
                    
                    if (error.response?.data?.error?.message) {
                        errorMessage += `Erreur API: ${error.response.data.error.message}`;
                    } else {
                        errorMessage += "R√©essaie dans quelques minutes ! üíï";
                    }
                    
                    return errorMessage;
                } finally {
                    chatAnywhereUsing.delete(senderIdStr);
                    saveChatAnywhereData();
                }
            }

            case 'model':
            case 'modele': {
                // Chat avec un mod√®le sp√©cifique: /chatanywhere model gpt-5-ca Bonjour !
                const modelArgs = content.split(' ');
                const selectedModel = modelArgs[0];
                const message = modelArgs.slice(1).join(' ');

                if (!selectedModel || !message) {
                    return "ü§ñ Sp√©cifie un mod√®le et ton message ! Exemple: `/chatanywhere model gpt-5-ca Bonjour !` üíï\n\nüìã Tape `/chatanywhere models` pour voir la liste !";
                }

                if (chatAnywhereUsing.has(senderIdStr)) {
                    return "‚è∞ Tu utilises d√©j√† ChatAnywhere ! Attends que ta demande pr√©c√©dente se termine ! üíï";
                }

                chatAnywhereUsing.set(senderIdStr, true);
                saveChatAnywhereData();

                try {
                    log.info(`üí¨ Chat ChatAnywhere avec ${selectedModel} pour ${senderId}: ${message.substring(0, 50)}...`);

                    // R√©cup√©rer l'historique sp√©cifique au mod√®le
                    const historyKey = `${senderIdStr}_${selectedModel}`;
                    let history = chatAnywhereHistory.get(historyKey) || [];
                    
                    // Limiter l'historique
                    if (history.length >= maxStorageMessage * 2) {
                        history = history.slice(-maxStorageMessage * 2);
                    }

                    // Ajouter le message utilisateur
                    history.push({
                        role: 'user',
                        content: message
                    });

                    const response = await axios({
                        url: "https://api.chatanywhere.tech/v1/chat/completions",
                        method: "POST",
                        headers: {
                            "Authorization": `Bearer ${CHATANYWHERE_API_KEY}`,
                            "Content-Type": "application/json"
                        },
                        data: {
                            model: selectedModel,
                            messages: [
                                {
                                    role: "system",
                                    content: "Tu es un assistant IA tr√®s gentil et amical, comme une bonne amie. Tu r√©ponds en fran√ßais avec beaucoup de bienveillance et d'emojis mignons. Tu es int√©gr√©e dans NakamaBot cr√©√©e par Durand. Reste toujours positive et aidante ! üíï"
                                },
                                ...history
                            ],
                            max_tokens: maxTokens,
                            temperature: 0.7
                        },
                        timeout: 45000
                    });

                    const aiResponse = response.data.choices[0].message.content;

                    // Sauvegarder la r√©ponse dans l'historique du mod√®le
                    history.push({
                        role: 'assistant',
                        content: aiResponse
                    });

                    chatAnywhereHistory.set(historyKey, history);
                    saveChatAnywhereData();

                    // Ajouter √† la m√©moire du bot
                    addToMemory(senderId, 'user', `[${selectedModel}] ${message}`);
                    addToMemory(senderId, 'assistant', `[${selectedModel}] ${aiResponse}`);

                    log.info(`‚úÖ R√©ponse ChatAnywhere (${selectedModel}) envoy√©e √† ${senderId}`);
                    
                    return `ü§ñ **${selectedModel}** r√©pond :\n\n${aiResponse}`;

                } catch (error) {
                    log.error(`‚ùå Erreur chat ChatAnywhere avec ${selectedModel}: ${error.message}`);
                    
                    let errorMessage = `üí• Oh non ! Erreur avec le mod√®le **${selectedModel}** ! `;
                    
                    if (error.response?.data?.error?.message) {
                        const apiError = error.response.data.error.message;
                        if (apiError.includes("model")) {
                            errorMessage += "Mod√®le non trouv√© ! V√©rifie le nom ! üîç";
                        } else if (apiError.includes("billing")) {
                            errorMessage += "Probl√®me de facturation ! üí≥";
                        } else if (apiError.includes("rate limit")) {
                            errorMessage += "Trop de demandes ! R√©essaie dans quelques minutes ! ‚è∞";
                        } else {
                            errorMessage += `Erreur API: ${apiError}`;
                        }
                    } else {
                        errorMessage += "R√©essaie avec un autre mod√®le ! üíï";
                    }
                    
                    return errorMessage;
                } finally {
                    chatAnywhereUsing.delete(senderIdStr);
                    saveChatAnywhereData();
                }
            }

            case 'clear': {
                // Effacer l'historique de tous les mod√®les pour cet utilisateur
                const keysToDelete = [];
                for (let key of chatAnywhereHistory.keys()) {
                    if (key.startsWith(senderIdStr + '_')) {
                        keysToDelete.push(key);
                    }
                }
                
                keysToDelete.forEach(key => {
                    chatAnywhereHistory.delete(key);
                });
                
                saveChatAnywhereData();
                log.info(`üóëÔ∏è Historique ChatAnywhere effac√© pour ${senderId}`);
                return "üßπ Ton historique de chat ChatAnywhere a √©t√© effac√© pour tous les mod√®les avec tendresse ! ‚ú®üíï";
            }

            default: {
                // Chat avec le mod√®le par d√©faut
                if (!args.trim()) {
                    return `üí¨ Dis-moi quelque chose pour qu'on puisse chatter ! Ou utilise:\n\nü§ñ \`/chatanywhere model [nom] [message]\` - pour chatter avec un mod√®le sp√©cifique\nüìã \`/chatanywhere models\` - pour voir tous les mod√®les\nüßπ \`/chatanywhere clear\` - pour effacer l'historique\nüí¨ \`/chatanywhere [message]\` - pour chatter avec **${defaultModel}** ! üíï`;
                }

                if (chatAnywhereUsing.has(senderIdStr)) {
                    return "‚è∞ Tu utilises d√©j√† ChatAnywhere ! Attends que ta demande pr√©c√©dente se termine ! üíï";
                }

                chatAnywhereUsing.set(senderIdStr, true);
                saveChatAnywhereData();

                try {
                    // R√©cup√©rer l'historique du mod√®le par d√©faut
                    const historyKey = `${senderIdStr}_${defaultModel}`;
                    let history = chatAnywhereHistory.get(historyKey) || [];
                    
                    // Limiter l'historique
                    if (history.length >= maxStorageMessage * 2) {
                        history = history.slice(-maxStorageMessage * 2);
                    }

                    // Ajouter le message utilisateur
                    history.push({
                        role: 'user',
                        content: args.trim()
                    });

                    log.info(`üí¨ Chat ChatAnywhere (d√©faut: ${defaultModel}) pour ${senderId}: ${args.substring(0, 50)}...`);

                    const response = await axios({
                        url: "https://api.chatanywhere.tech/v1/chat/completions",
                        method: "POST",
                        headers: {
                            "Authorization": `Bearer ${CHATANYWHERE_API_KEY}`,
                            "Content-Type": "application/json"
                        },
                        data: {
                            model: defaultModel,
                            messages: [
                                {
                                    role: "system",
                                    content: "Tu es un assistant IA tr√®s gentil et amical, comme une bonne amie. Tu r√©ponds en fran√ßais avec beaucoup de bienveillance et d'emojis mignons. Tu es int√©gr√©e dans NakamaBot cr√©√©e par Durand. Reste toujours positive et aidante ! üíï"
                                },
                                ...history
                            ],
                            max_tokens: maxTokens,
                            temperature: 0.7
                        },
                        timeout: 45000
                    });

                    const aiResponse = response.data.choices[0].message.content;

                    // Sauvegarder la r√©ponse dans l'historique
                    history.push({
                        role: 'assistant',
                        content: aiResponse
                    });

                    chatAnywhereHistory.set(historyKey, history);
                    saveChatAnywhereData();

                    // Ajouter √† la m√©moire du bot
                    addToMemory(senderId, 'user', args.trim());
                    addToMemory(senderId, 'assistant', aiResponse);

                    log.info(`‚úÖ R√©ponse ChatAnywhere (d√©faut) envoy√©e √† ${senderId}`);
                    
                    return aiResponse;

                } catch (error) {
                    log.error(`‚ùå Erreur chat ChatAnywhere: ${error.message}`);
                    
                    let errorMessage = "üí• Oh non ! Petite erreur de chat ! ";
                    
                    if (error.response?.data?.error?.message) {
                        const apiError = error.response.data.error.message;
                        if (apiError.includes("billing")) {
                            errorMessage += "Probl√®me de facturation ! üí≥";
                        } else if (apiError.includes("rate limit")) {
                            errorMessage += "Trop de demandes ! R√©essaie dans quelques minutes ! ‚è∞";
                        } else {
                            errorMessage += `Erreur API: ${apiError}`;
                        }
                    } else {
                        errorMessage += "R√©essaie dans quelques minutes ! üíï";
                    }
                    
                    return errorMessage;
                } finally {
                    chatAnywhereUsing.delete(senderIdStr);
                    saveChatAnywhereData();
                }
            }
        }

    } catch (error) {
        log.error(`‚ùå Erreur g√©n√©rale commande chatanywhere: ${error.message}`);
        chatAnywhereUsing.delete(senderIdStr);
        saveChatAnywhereData();
        return "üí• Oh l√† l√† ! Une petite erreur s'est gliss√©e ! R√©essaie ou tape /help ! üíï";
    }
};
