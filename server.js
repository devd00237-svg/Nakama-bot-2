const express = require('express');
const axios = require('axios');
const bodyParser = require('body-parser');
const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

const app = express();
app.use(bodyParser.json());

// Configuration 
const VERIFY_TOKEN = process.env.VERIFY_TOKEN || "nakamaverifytoken";
const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN || "";
const MISTRAL_API_KEY = process.env.MISTRAL_API_KEY || "";
const GITHUB_TOKEN = process.env.GITHUB_TOKEN || "";
const GITHUB_USERNAME = process.env.GITHUB_USERNAME || "";
const GITHUB_REPO = process.env.GITHUB_REPO || "nakamabot-data";
const SERVER_URL = process.env.SERVER_URL || `http://localhost:${PORT || 5000}`;
const ADMIN_IDS = new Set(
    (process.env.ADMIN_IDS || "").split(",").map(id => id.trim()).filter(id => id)
);

// ‚úÖ NOUVEAU: Configuration Google Search API avec rotation
const GOOGLE_API_KEYS = (process.env.GOOGLE_API_KEYS || "").split(",").map(key => key.trim()).filter(key => key);
const GOOGLE_SEARCH_ENGINE_IDS = (process.env.GOOGLE_SEARCH_ENGINE_IDS || "").split(",").map(id => id.trim()).filter(id => id);

// Variables pour la rotation des cl√©s Google
let currentGoogleKeyIndex = 0;
let currentSearchEngineIndex = 0;
const googleKeyUsage = new Map(); // Suivre l'utilisation des cl√©s
const GOOGLE_DAILY_LIMIT = 100; // Limite par cl√© par jour
const GOOGLE_RETRY_DELAY = 5000; // D√©lai entre les tentatives (augment√© pour √©viter 429)

// M√©moire du bot (stockage local temporaire + sauvegarde permanente GitHub)
const userMemory = new Map();
const userList = new Set();
const userLastImage = new Map();
const clanData = new Map(); // Stockage des donn√©es sp√©cifiques aux commandes

// ‚úÖ NOUVEAU: R√©f√©rence vers la commande rank pour le syst√®me d'exp√©rience
let rankCommand = null;

// üÜï AJOUT: Gestion des messages tronqu√©s avec chunks
const truncatedMessages = new Map(); // senderId -> { fullMessage, lastSentPart }

// Configuration des logs
const log = {
    info: (msg) => console.log(`${new Date().toISOString()} - INFO - ${msg}`),
    error: (msg) => console.error(`${new Date().toISOString()} - ERROR - ${msg}`),
    warning: (msg) => console.warn(`${new Date().toISOString()} - WARNING - ${msg}`),
    debug: (msg) => console.log(`${new Date().toISOString()} - DEBUG - ${msg}`)
};

// === FONCTIONS DE GESTION DES MESSAGES TRONQU√âS ===

/**
 * Divise un message en chunks de taille appropri√©e pour Messenger
 * @param {string} text - Texte complet
 * @param {number} maxLength - Taille maximale par chunk (d√©faut: 2000)
 * @returns {Array} - Array des chunks
 */
function splitMessageIntoChunks(text, maxLength = 2000) {
    if (!text || text.length <= maxLength) {
        return [text];
    }
    
    const chunks = [];
    let currentChunk = '';
    const lines = text.split('\n');
    
    for (const line of lines) {
        // Si ajouter cette ligne d√©passe la limite
        if (currentChunk.length + line.length + 1 > maxLength) {
            // Si le chunk actuel n'est pas vide, le sauvegarder
            if (currentChunk.trim()) {
                chunks.push(currentChunk.trim());
                currentChunk = '';
            }
            
            // Si la ligne elle-m√™me est trop longue, la couper
            if (line.length > maxLength) {
                const words = line.split(' ');
                let currentLine = '';
                
                for (const word of words) {
                    if (currentLine.length + word.length + 1 > maxLength) {
                        if (currentLine.trim()) {
                            chunks.push(currentLine.trim());
                            currentLine = word;
                        } else {
                            // Mot unique trop long, le couper brutalement
                            chunks.push(word.substring(0, maxLength - 3) + '...');
                            currentLine = word.substring(maxLength - 3);
                        }
                    } else {
                        currentLine += (currentLine ? ' ' : '') + word;
                    }
                }
                
                if (currentLine.trim()) {
                    currentChunk = currentLine;
                }
            } else {
                currentChunk = line;
            }
        } else {
            currentChunk += (currentChunk ? '\n' : '') + line;
        }
    }
    
    // Ajouter le dernier chunk s'il n'est pas vide
    if (currentChunk.trim()) {
        chunks.push(currentChunk.trim());
    }
    
    return chunks.length > 0 ? chunks : [text];
}

/**
 * D√©tecte si l'utilisateur demande la suite d'un message tronqu√©
 * @param {string} message - Message de l'utilisateur
 * @returns {boolean} - True si c'est une demande de continuation
 */
function isContinuationRequest(message) {
    const lowerMessage = message.toLowerCase().trim();
    const continuationPatterns = [
        /^(continue|continuer?)$/,
        /^(suite|la suite)$/,
        /^(apr√®s|ensuite)$/,
        /^(plus|encore)$/,
        /^(next|suivant)$/,
        /^\.\.\.$/,
        /^(termine|fini[sr]?)$/
    ];
    
    return continuationPatterns.some(pattern => pattern.test(lowerMessage));
}

// === GESTION GOOGLE SEARCH API AVEC ROTATION ===

/**
 * Obtient la prochaine cl√© Google API disponible
 * @returns {Object|null} - {apiKey, searchEngineId, keyIndex, engineIndex} ou null
 */
function getNextGoogleKey() {
    if (GOOGLE_API_KEYS.length === 0 || GOOGLE_SEARCH_ENGINE_IDS.length === 0) {
        log.warning("‚ö†Ô∏è Aucune cl√© Google Search API configur√©e");
        return null;
    }
    
    const today = new Date().toDateString();
    
    // ‚úÖ CORRECTION: Essayer toutes les combinaisons sans distinction de taille
    const totalKeys = GOOGLE_API_KEYS.length;
    const totalEngines = GOOGLE_SEARCH_ENGINE_IDS.length;
    const totalCombinations = totalKeys * totalEngines;
    
    // Essayer toutes les combinaisons possibles
    for (let attempt = 0; attempt < totalCombinations; attempt++) {
        const keyIndex = (currentGoogleKeyIndex + Math.floor(attempt / totalEngines)) % totalKeys;
        const engineIndex = (currentSearchEngineIndex + (attempt % totalEngines)) % totalEngines;
        
        const apiKey = GOOGLE_API_KEYS[keyIndex];
        const searchEngineId = GOOGLE_SEARCH_ENGINE_IDS[engineIndex];
        const keyId = `${keyIndex}-${engineIndex}-${today}`;
        
        const usage = googleKeyUsage.get(keyId) || 0;
        
        if (usage < GOOGLE_DAILY_LIMIT) {
            log.debug(`üîë Utilisation cl√© Google ${keyIndex}/${engineIndex}: ${usage}/${GOOGLE_DAILY_LIMIT}`);
            return {
                apiKey,
                searchEngineId,
                keyIndex,
                engineIndex,
                keyId,
                usage
            };
        }
    }
    
    log.error("‚ùå Toutes les cl√©s Google Search API ont atteint leur limite quotidienne");
    return null;
}

/**
 * Met √† jour l'usage d'une cl√© Google et fait tourner les indices
 * @param {string} keyId - ID de la cl√© utilis√©e
 * @param {number} keyIndex - Index de la cl√©
 * @param {number} engineIndex - Index du moteur
 * @param {boolean} success - Si la requ√™te a r√©ussi
 */
function updateGoogleKeyUsage(keyId, keyIndex, engineIndex, success) {
    if (success) {
        googleKeyUsage.set(keyId, (googleKeyUsage.get(keyId) || 0) + 1);
        log.debug(`üìà Usage cl√© Google ${keyIndex}/${engineIndex}: ${googleKeyUsage.get(keyId)}/${GOOGLE_DAILY_LIMIT}`);
    }
    
    // Faire tourner les indices pour la prochaine utilisation
    currentSearchEngineIndex = (currentSearchEngineIndex + 1) % GOOGLE_SEARCH_ENGINE_IDS.length;
    if (currentSearchEngineIndex === 0) {
        currentGoogleKeyIndex = (currentGoogleKeyIndex + 1) % GOOGLE_API_KEYS.length;
    }
}

/**
 * Effectue une recherche Google avec rotation des cl√©s
 * @param {string} query - Requ√™te de recherche
 * @param {number} numResults - Nombre de r√©sultats (d√©faut: 5)
 * @returns {Array|null} - R√©sultats de recherche ou null
 */
async function googleSearch(query, numResults = 5) {
    if (!query || typeof query !== 'string') {
        log.warning("‚ö†Ô∏è Requ√™te de recherche vide");
        return null;
    }
    
    const googleKey = getNextGoogleKey();
    if (!googleKey) {
        return null;
    }
    
    const { apiKey, searchEngineId, keyIndex, engineIndex, keyId } = googleKey;
    
    try {
        log.info(`üîç Recherche Google avec cl√© ${keyIndex}/${engineIndex}: "${query.substring(0, 50)}..."`);
        
        // ‚úÖ CORRECTION: Ajouter un d√©lai pour √©viter le rate limiting (augment√© √† 1000ms)
        await sleep(1000);
        
        const response = await axios.get('https://www.googleapis.com/customsearch/v1', {
            params: {
                key: apiKey,
                cx: searchEngineId,
                q: query,
                num: Math.min(numResults, 10), // Maximum 10 r√©sultats par requ√™te
                safe: 'active',
                lr: 'lang_fr', // Priorit√© au fran√ßais
                gl: 'fr' // G√©olocalisation France
            },
            timeout: 15000 // ‚úÖ CORRECTION: Timeout plus long
        });
        
        if (response.status === 200 && response.data.items) {
            updateGoogleKeyUsage(keyId, keyIndex, engineIndex, true);
            
            const results = response.data.items.map(item => ({
                title: item.title,
                link: item.link,
                snippet: item.snippet,
                displayLink: item.displayLink
            }));
            
            log.info(`‚úÖ ${results.length} r√©sultats Google trouv√©s avec cl√© ${keyIndex}/${engineIndex}`);
            return results;
        } else {
            log.warning(`‚ö†Ô∏è R√©ponse Google vide avec cl√© ${keyIndex}/${engineIndex}`);
            return null;
        }
        
    } catch (error) {
        if (error.response) {
            const status = error.response.status;
            const errorData = error.response.data;
            
            if (status === 403) {
                if (errorData.error?.errors?.[0]?.reason === 'dailyLimitExceeded') {
                    log.warning(`‚ö†Ô∏è Limite quotidienne atteinte pour cl√© Google ${keyIndex}/${engineIndex}`);
                    // Marquer cette cl√© comme √©puis√©e
                    googleKeyUsage.set(keyId, GOOGLE_DAILY_LIMIT);
                    
                    // ‚úÖ CORRECTION: Essayer avec la cl√© suivante SEULEMENT s'il y en a d'autres
                    const totalCombinations = GOOGLE_API_KEYS.length * GOOGLE_SEARCH_ENGINE_IDS.length;
                    if (totalCombinations > 1) {
                        log.info("üîÑ Tentative avec cl√© suivante...");
                        await sleep(GOOGLE_RETRY_DELAY);
                        return await googleSearch(query, numResults);
                    } else {
                        log.warning("‚ö†Ô∏è Une seule combinaison cl√©/moteur disponible et √©puis√©e");
                        return null;
                    }
                } else if (errorData.error?.errors?.[0]?.reason === 'keyInvalid') {
                    log.error(`‚ùå Cl√© Google API invalide ${keyIndex}/${engineIndex}`);
                } else {
                    log.error(`‚ùå Erreur Google API 403 avec cl√© ${keyIndex}/${engineIndex}: ${JSON.stringify(errorData)}`);
                }
            } else if (status === 429) {
                log.warning(`‚ö†Ô∏è Rate limit Google avec cl√© ${keyIndex}/${engineIndex}, retry avec d√©lai plus long...`);
                
                // ‚úÖ AM√âLIORATION: Boucle de retry avec backoff exponentiel (jusqu'√† 3 tentatives)
                let retrySuccess = false;
                let retryDelay = GOOGLE_RETRY_DELAY;
                for (let retryAttempt = 1; retryAttempt <= 3; retryAttempt++) {
                    await sleep(retryDelay);
                    try {
                        const retryResponse = await axios.get('https://www.googleapis.com/customsearch/v1', {
                            params: {
                                key: apiKey,
                                cx: searchEngineId,
                                q: query,
                                num: Math.min(numResults, 10),
                                safe: 'active',
                                lr: 'lang_fr',
                                gl: 'fr'
                            },
                            timeout: 20000
                        });
                        
                        if (retryResponse.status === 200 && retryResponse.data.items) {
                            updateGoogleKeyUsage(keyId, keyIndex, engineIndex, true);
                            
                            const results = retryResponse.data.items.map(item => ({
                                title: item.title,
                                link: item.link,
                                snippet: item.snippet,
                                displayLink: item.displayLink
                            }));
                            
                            log.info(`‚úÖ ${results.length} r√©sultats Google trouv√©s avec cl√© ${keyIndex}/${engineIndex} (retry ${retryAttempt})`);
                            retrySuccess = true;
                            return results;
                        }
                    } catch (retryError) {
                        log.warning(`‚ö†Ô∏è √âchec retry ${retryAttempt} pour cl√© ${keyIndex}/${engineIndex}: ${retryError.message}`);
                        retryDelay *= 2; // Backoff exponentiel
                    }
                }
                
                if (!retrySuccess) {
                    // Essayer la cl√© suivante si disponible
                    const totalCombinations = GOOGLE_API_KEYS.length * GOOGLE_SEARCH_ENGINE_IDS.length;
                    if (totalCombinations > 1) {
                        log.info("üîÑ Tentative avec cl√© suivante apr√®s rate limit...");
                        await sleep(1000); // D√©lai suppl√©mentaire avant de switcher
                        return await googleSearch(query, numResults);
                    }
                }
                return null;
            } else {
                log.error(`‚ùå Erreur Google API ${status} avec cl√© ${keyIndex}/${engineIndex}: ${error.message}`);
            }
        } else {
            log.error(`‚ùå Erreur r√©seau Google Search: ${error.message}`);
        }
        
        updateGoogleKeyUsage(keyId, keyIndex, engineIndex, false);
        return null;
    }
}

// ‚úÖ RECHERCHE WEB AM√âLIOR√âE avec Google Search API + fallback Mistral + gestion rate limiting
async function webSearch(query) {
    if (!query || typeof query !== 'string') {
        return "Oh non ! Je n'ai pas compris ta recherche... ü§î";
    }
    
    try {
        // ‚úÖ CORRECTION: V√©rifier si Google Search est disponible avant d'essayer
        if (GOOGLE_API_KEYS.length === 0 || GOOGLE_SEARCH_ENGINE_IDS.length === 0) {
            log.info(`üîÑ Google Search non configur√©, utilisation de Mistral pour: "${query}"`);
            return await fallbackMistralSearch(query);
        }
        
        // Essayer d'abord avec Google Search API
        const googleResults = await googleSearch(query, 5);
        
        if (googleResults && googleResults.length > 0) {
            // Formater les r√©sultats Google pour une r√©ponse amicale
            let response = `üîç J'ai trouv√© √ßa pour "${query}" :\n\n`;
            
            googleResults.slice(0, 3).forEach((result, index) => {
                response += `${index + 1}. **${result.title}**\n`;
                response += `${result.snippet}\n`;
                response += `üîó ${result.link}\n\n`;
            });
            
            if (googleResults.length > 3) {
                response += `... et ${googleResults.length - 3} autres r√©sultats ! üìö\n`;
            }
            
            response += "\nüí° Besoin de plus d'infos ? N'h√©site pas √† me poser des questions ! üíï";
            return response;
        } else {
            // ‚úÖ CORRECTION: Fallback propre vers Mistral
            log.info(`üîÑ Google Search √©chou√©, fallback Mistral pour: "${query}"`);
            return await fallbackMistralSearch(query);
        }
        
    } catch (error) {
        log.error(`‚ùå Erreur recherche compl√®te: ${error.message}`);
        
        // ‚úÖ CORRECTION: Si erreur 429, passer directement au fallback
        if (error.response?.status === 429) {
            log.info(`üîÑ Rate limit d√©tect√©, utilisation du fallback Mistral pour: "${query}"`);
            return await fallbackMistralSearch(query);
        }
        
        return "Oh non ! Une petite erreur de recherche... D√©sol√©e ! üíï";
    }
}

// ‚úÖ NOUVELLE FONCTION: Fallback Mistral s√©par√©e pour √©viter la duplication
async function fallbackMistralSearch(query) {
    try {
        const searchContext = `Recherche web pour '${query}' en 2025. Je peux r√©pondre avec mes connaissances de 2025.`;
        const messages = [{
            role: "system",
            content: `Tu es NakamaBot, une assistante IA tr√®s gentille et amicale qui aide avec les recherches. Nous sommes en 2025. R√©ponds √† cette recherche: '${query}' avec tes connaissances de 2025. Si tu ne sais pas, dis-le gentiment. R√©ponds en fran√ßais avec une personnalit√© amicale et bienveillante, maximum 400 caract√®res.`
        }];
        
        const mistralResult = await callMistralAPI(messages, 200, 0.3);
        
        if (mistralResult) {
            return `ü§ñ Voici ce que je sais sur "${query}" :\n\n${mistralResult}\n\nüíï (Recherche bas√©e sur mes connaissances - Pour des infos plus r√©centes, r√©essaie plus tard !)`;
        } else {
            return `üòî D√©sol√©e, je n'arrive pas √† trouver d'infos sur "${query}" pour le moment... R√©essaie plus tard ? üíï`;
        }
    } catch (error) {
        log.error(`‚ùå Erreur fallback Mistral: ${error.message}`);
        return `üòî D√©sol√©e, impossible de rechercher "${query}" maintenant... R√©essaie plus tard ? üíï`;
    }
}

// === GESTION GITHUB API ===

// Encoder en base64 pour GitHub
function encodeBase64(content) {
    return Buffer.from(JSON.stringify(content, null, 2), 'utf8').toString('base64');
}

// D√©coder depuis base64 GitHub
function decodeBase64(content) {
    return JSON.parse(Buffer.from(content, 'base64').toString('utf8'));
}

// URL de base pour l'API GitHub
const getGitHubApiUrl = (filename) => {
    return `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/contents/${filename}`;
};

// Cr√©er le repository GitHub si n√©cessaire
async function createGitHubRepo() {
    if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
        log.error("‚ùå GITHUB_TOKEN ou GITHUB_USERNAME manquant pour cr√©er le repo");
        return false;
    }

    try {
        const checkResponse = await axios.get(
            `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}`,
            {
                headers: {
                    'Authorization': `token ${GITHUB_TOKEN}`,
                    'Accept': 'application/vnd.github.v3+json'
                },
                timeout: 10000
            }
        );
        
        if (checkResponse.status === 200) {
            log.info(`‚úÖ Repository ${GITHUB_REPO} existe d√©j√†`);
            return true;
        }
    } catch (error) {
        if (error.response?.status === 404) {
            try {
                const createResponse = await axios.post(
                    'https://api.github.com/user/repos',
                    {
                        name: GITHUB_REPO,
                        description: 'Sauvegarde des donn√©es NakamaBot - Cr√©√© automatiquement',
                        private: true,
                        auto_init: true
                    },
                    {
                        headers: {
                            'Authorization': `token ${GITHUB_TOKEN}`,
                            'Accept': 'application/vnd.github.v3+json'
                        },
                        timeout: 15000
                    }
                );

                if (createResponse.status === 201) {
                    log.info(`üéâ Repository ${GITHUB_REPO} cr√©√© avec succ√®s !`);
                    log.info(`üìù URL: https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO}`);
                    return true;
                }
            } catch (createError) {
                log.error(`‚ùå Erreur cr√©ation repository: ${createError.message}`);
                return false;
            }
        } else {
            log.error(`‚ùå Erreur v√©rification repository: ${error.message}`);
            return false;
        }
    }

    return false;
}

// Variable pour √©viter les sauvegardes simultan√©es
let isSaving = false;
let saveQueue = [];

// === SAUVEGARDE GITHUB AVEC SUPPORT CLANS ET EXP√âRIENCE ===
async function saveDataToGitHub() {
    if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
        log.debug("üîÑ Pas de sauvegarde GitHub (config manquante)");
        return;
    }

    if (isSaving) {
        log.debug("‚è≥ Sauvegarde d√©j√† en cours, ajout √† la queue");
        return new Promise((resolve) => {
            saveQueue.push(resolve);
        });
    }

    isSaving = true;

    try {
        log.debug(`üíæ Tentative de sauvegarde sur GitHub: ${GITHUB_USERNAME}/${GITHUB_REPO}`);
        
        const filename = 'nakamabot-data.json';
        const url = getGitHubApiUrl(filename);
        
        const dataToSave = {
            userList: Array.from(userList),
            userMemory: Object.fromEntries(userMemory),
            userLastImage: Object.fromEntries(userLastImage),
            
            // ‚úÖ NOUVEAU: Sauvegarder les donn√©es d'exp√©rience
            userExp: rankCommand ? rankCommand.getExpData() : {},
            
            // üÜï NOUVEAU: Sauvegarder les messages tronqu√©s
            truncatedMessages: Object.fromEntries(truncatedMessages),
            
            // ‚úÖ NOUVEAU: Sauvegarder l'usage des cl√©s Google
            googleKeyUsage: Object.fromEntries(googleKeyUsage),
            currentGoogleKeyIndex,
            currentSearchEngineIndex,
            
            // Donn√©es des clans et autres commandes
            clanData: commandContext.clanData || null,
            commandData: Object.fromEntries(clanData),
            
            lastUpdate: new Date().toISOString(),
            version: "4.0 Amicale + Vision + GitHub + Clans + Rank + Truncation + Google Search",
            totalUsers: userList.size,
            totalConversations: userMemory.size,
            totalImages: userLastImage.size,
            totalTruncated: truncatedMessages.size,
            totalClans: commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0,
            totalUsersWithExp: rankCommand ? Object.keys(rankCommand.getExpData()).length : 0,
            totalGoogleKeys: GOOGLE_API_KEYS.length,
            totalSearchEngines: GOOGLE_SEARCH_ENGINE_IDS.length,
            bot: "NakamaBot",
            creator: "Durand"
        };

        const commitData = {
            message: `ü§ñ Sauvegarde automatique NakamaBot - ${new Date().toISOString()}`,
            content: encodeBase64(dataToSave)
        };

        let maxRetries = 3;
        let success = false;

        for (let attempt = 1; attempt <= maxRetries && !success; attempt++) {
            try {
                const existingResponse = await axios.get(url, {
                    headers: {
                        'Authorization': `token ${GITHUB_TOKEN}`,
                        'Accept': 'application/vnd.github.v3+json'
                    },
                    timeout: 10000
                });

                if (existingResponse.data?.sha) {
                    commitData.sha = existingResponse.data.sha;
                }

                const response = await axios.put(url, commitData, {
                    headers: {
                        'Authorization': `token ${GITHUB_TOKEN}`,
                        'Accept': 'application/vnd.github.v3+json'
                    },
                    timeout: 15000
                });

                if (response.status === 200 || response.status === 201) {
                    const clanCount = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
                    const expDataCount = rankCommand ? Object.keys(rankCommand.getExpData()).length : 0;
                    log.info(`üíæ Donn√©es sauvegard√©es sur GitHub (${userList.size} users, ${userMemory.size} convs, ${userLastImage.size} imgs, ${clanCount} clans, ${expDataCount} exp, ${truncatedMessages.size} trunc, ${GOOGLE_API_KEYS.length} Google keys)`);
                    success = true;
                } else {
                    log.error(`‚ùå Erreur sauvegarde GitHub: ${response.status}`);
                }

            } catch (retryError) {
                if (retryError.response?.status === 409 && attempt < maxRetries) {
                    log.warning(`‚ö†Ô∏è Conflit SHA d√©tect√© (409), tentative ${attempt}/${maxRetries}, retry dans 1s...`);
                    await sleep(1000);
                    continue;
                } else if (retryError.response?.status === 404 && attempt === 1) {
                    log.debug("üìù Premier fichier, pas de SHA n√©cessaire");
                    delete commitData.sha;
                    continue;
                } else {
                    throw retryError;
                }
            }
        }

        if (!success) {
            log.error("‚ùå √âchec de sauvegarde apr√®s plusieurs tentatives");
        }

    } catch (error) {
        if (error.response?.status === 404) {
            log.error("‚ùå Repository GitHub introuvable pour la sauvegarde (404)");
            log.error(`üîç Repository utilis√©: ${GITHUB_USERNAME}/${GITHUB_REPO}`);
        } else if (error.response?.status === 401) {
            log.error("‚ùå Token GitHub invalide pour la sauvegarde (401)");
        } else if (error.response?.status === 403) {
            log.error("‚ùå Acc√®s refus√© GitHub pour la sauvegarde (403)");
        } else if (error.response?.status === 409) {
            log.warning("‚ö†Ô∏è Conflit SHA persistant - sauvegarde ignor√©e pour √©viter les blocages");
        } else {
            log.error(`‚ùå Erreur sauvegarde GitHub: ${error.message}`);
        }
    } finally {
        isSaving = false;
        
        const queueCallbacks = [...saveQueue];
        saveQueue = [];
        queueCallbacks.forEach(callback => callback());
    }
}

// === CHARGEMENT GITHUB AVEC SUPPORT CLANS ET EXP√âRIENCE ===
async function loadDataFromGitHub() {
    if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
        log.warning("‚ö†Ô∏è Configuration GitHub manquante, utilisation du stockage temporaire uniquement");
        return;
    }

    try {
        log.info(`üîç Tentative de chargement depuis GitHub: ${GITHUB_USERNAME}/${GITHUB_REPO}`);
        
        const filename = 'nakamabot-data.json';
        const url = getGitHubApiUrl(filename);
        
        const response = await axios.get(url, {
            headers: {
                'Authorization': `token ${GITHUB_TOKEN}`,
                'Accept': 'application/vnd.github.v3+json'
            },
            timeout: 10000
        });

        if (response.status === 200 && response.data.content) {
            const data = decodeBase64(response.data.content);
            
            // Charger userList
            if (data.userList && Array.isArray(data.userList)) {
                data.userList.forEach(userId => userList.add(userId));
                log.info(`‚úÖ ${data.userList.length} utilisateurs charg√©s depuis GitHub`);
            }

            // Charger userMemory
            if (data.userMemory && typeof data.userMemory === 'object') {
                Object.entries(data.userMemory).forEach(([userId, memory]) => {
                    if (Array.isArray(memory)) {
                        userMemory.set(userId, memory);
                    }
                });
                log.info(`‚úÖ ${Object.keys(data.userMemory).length} conversations charg√©es depuis GitHub`);
            }

            // Charger userLastImage
            if (data.userLastImage && typeof data.userLastImage === 'object') {
                Object.entries(data.userLastImage).forEach(([userId, imageUrl]) => {
                    userLastImage.set(userId, imageUrl);
                });
                log.info(`‚úÖ ${Object.keys(data.userLastImage).length} images charg√©es depuis GitHub`);
            }

            // üÜï NOUVEAU: Charger les messages tronqu√©s
            if (data.truncatedMessages && typeof data.truncatedMessages === 'object') {
                Object.entries(data.truncatedMessages).forEach(([userId, truncData]) => {
                    if (truncData && typeof truncData === 'object') {
                        truncatedMessages.set(userId, truncData);
                    }
                });
                log.info(`‚úÖ ${Object.keys(data.truncatedMessages).length} messages tronqu√©s charg√©s depuis GitHub`);
            }

            // ‚úÖ NOUVEAU: Charger l'usage des cl√©s Google
            if (data.googleKeyUsage && typeof data.googleKeyUsage === 'object') {
                Object.entries(data.googleKeyUsage).forEach(([keyId, usage]) => {
                    googleKeyUsage.set(keyId, usage);
                });
                log.info(`‚úÖ ${Object.keys(data.googleKeyUsage).length} donn√©es d'usage Google charg√©es depuis GitHub`);
            }

            // Charger les indices des cl√©s Google
            if (typeof data.currentGoogleKeyIndex === 'number') {
                currentGoogleKeyIndex = data.currentGoogleKeyIndex;
            }
            if (typeof data.currentSearchEngineIndex === 'number') {
                currentSearchEngineIndex = data.currentSearchEngineIndex;
            }

            // ‚úÖ NOUVEAU: Charger les donn√©es d'exp√©rience
            if (data.userExp && typeof data.userExp === 'object' && rankCommand) {
                rankCommand.loadExpData(data.userExp);
                log.info(`‚úÖ ${Object.keys(data.userExp).length} donn√©es d'exp√©rience charg√©es depuis GitHub`);
            }

            // Charger les donn√©es des clans
            if (data.clanData && typeof data.clanData === 'object') {
                commandContext.clanData = data.clanData;
                const clanCount = Object.keys(data.clanData.clans || {}).length;
                log.info(`‚úÖ ${clanCount} clans charg√©s depuis GitHub`);
            }

            // Charger autres donn√©es de commandes
            if (data.commandData && typeof data.commandData === 'object') {
                Object.entries(data.commandData).forEach(([key, value]) => {
                    clanData.set(key, value);
                });
                log.info(`‚úÖ ${Object.keys(data.commandData).length} donn√©es de commandes charg√©es depuis GitHub`);
            }

            log.info("üéâ Donn√©es charg√©es avec succ√®s depuis GitHub !");
        }
    } catch (error) {
        if (error.response?.status === 404) {
            log.warning("üìÅ Aucune sauvegarde trouv√©e sur GitHub - Premi√®re utilisation");
            log.info("üîß Cr√©ation du fichier de sauvegarde initial...");
            
            const repoCreated = await createGitHubRepo();
            if (repoCreated) {
                await saveDataToGitHub();
            }
        } else if (error.response?.status === 401) {
            log.error("‚ùå Token GitHub invalide (401) - V√©rifiez votre GITHUB_TOKEN");
        } else if (error.response?.status === 403) {
            log.error("‚ùå Acc√®s refus√© GitHub (403) - V√©rifiez les permissions de votre token");
        } else {
            log.error(`‚ùå Erreur chargement GitHub: ${error.message}`);
            if (error.response) {
                log.error(`üìä Status: ${error.response.status}, Data: ${JSON.stringify(error.response.data)}`);
            }
        }
    }
}

// Sauvegarder automatiquement toutes les 5 minutes
let saveInterval;
function startAutoSave() {
    if (saveInterval) {
        clearInterval(saveInterval);
    }
    
    saveInterval = setInterval(async () => {
        await saveDataToGitHub();
    }, 5 * 60 * 1000); // 5 minutes
    
    log.info("üîÑ Sauvegarde automatique GitHub activ√©e (toutes les 5 minutes)");
}

// Sauvegarder lors de changements importants (non-bloquant)
async function saveDataImmediate() {
    saveDataToGitHub().catch(err => 
        log.debug(`üîÑ Sauvegarde en arri√®re-plan: ${err.message}`)
    );
}

// === UTILITAIRES ===

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

// Appel API Mistral avec retry
async function callMistralAPI(messages, maxTokens = 200, temperature = 0.7) {
    if (!MISTRAL_API_KEY) {
        return null;
    }
    
    const headers = {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${MISTRAL_API_KEY}`
    };
    
    const data = {
        model: "mistral-small-latest",
        messages: messages,
        max_tokens: maxTokens,
        temperature: temperature
    };
    
    for (let attempt = 0; attempt < 2; attempt++) {
        try {
            const response = await axios.post(
                "https://api.mistral.ai/v1/chat/completions",
                data,
                { headers, timeout: 30000 }
            );
            
            if (response.status === 200) {
                return response.data.choices[0].message.content;
            } else if (response.status === 401) {
                log.error("‚ùå Cl√© API Mistral invalide");
                return null;
            } else {
                if (attempt === 0) {
                    await sleep(2000);
                    continue;
                }
                return null;
            }
        } catch (error) {
            if (attempt === 0) {
                await sleep(2000);
                continue;
            }
            log.error(`‚ùå Erreur Mistral: ${error.message}`);
            return null;
        }
    }
    
    return null;
}

// Analyser une image avec l'API Vision de Mistral
async function analyzeImageWithVision(imageUrl) {
    if (!MISTRAL_API_KEY) {
        return null;
    }
    
    try {
        const headers = {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${MISTRAL_API_KEY}`
        };
        
        const messages = [{
            role: "user",
            content: [
                {
                    type: "text",
                    text: "D√©cris en d√©tail ce que tu vois dans cette image en fran√ßais. Sois pr√©cise et descriptive, comme si tu expliquais √† un(e) ami(e). Maximum 300 mots avec des emojis mignons. üíï"
                },
                {
                    type: "image_url",
                    image_url: {
                        url: imageUrl
                    }
                }
            ]
        }];
        
        const data = {
            model: "pixtral-12b-2409",
            messages: messages,
            max_tokens: 400,
            temperature: 0.3
        };
        
        const response = await axios.post(
            "https://api.mistral.ai/v1/chat/completions",
            data,
            { headers, timeout: 30000 }
        );
        
        if (response.status === 200) {
            return response.data.choices[0].message.content;
        } else {
            log.error(`‚ùå Erreur Vision API: ${response.status}`);
            return null;
        }
    } catch (error) {
        log.error(`‚ùå Erreur analyse image: ${error.message}`);
        return null;
    }
}

// ‚úÖ GESTION CORRIG√âE DE LA M√âMOIRE - √âVITER LES DOUBLONS
function addToMemory(userId, msgType, content) {
    if (!userId || !msgType || !content) {
        log.debug("‚ùå Param√®tres manquants pour addToMemory");
        return;
    }
    
    if (content.length > 1500) {
        content = content.substring(0, 1400) + "...[tronqu√©]";
    }
    
    if (!userMemory.has(userId)) {
        userMemory.set(userId, []);
    }
    
    const memory = userMemory.get(userId);
    
    // ‚úÖ NOUVELLE LOGIQUE: V√©rifier les doublons
    if (memory.length > 0) {
        const lastMessage = memory[memory.length - 1];
        
        if (lastMessage.type === msgType && lastMessage.content === content) {
            log.debug(`üîÑ Doublon √©vit√© pour ${userId}: ${msgType.substring(0, 50)}...`);
            return;
        }
        
        if (msgType === 'assistant' && lastMessage.type === 'assistant') {
            const similarity = calculateSimilarity(lastMessage.content, content);
            if (similarity > 0.8) {
                log.debug(`üîÑ Doublon assistant √©vit√© (similarit√©: ${Math.round(similarity * 100)}%)`);
                return;
            }
        }
    }
    
    memory.push({
        type: msgType,
        content: content,
        timestamp: new Date().toISOString()
    });
    
    if (memory.length > 8) {
        memory.shift();
    }
    
    log.debug(`üí≠ Ajout√© en m√©moire [${userId}]: ${msgType} (${content.length} chars)`);
    
    saveDataImmediate().catch(err => 
        log.debug(`üîÑ Erreur sauvegarde m√©moire: ${err.message}`)
    );
}

// ‚úÖ FONCTION UTILITAIRE: Calculer la similarit√© entre deux textes
function calculateSimilarity(text1, text2) {
    if (!text1 || !text2) return 0;
    
    const normalize = (text) => text.toLowerCase().replace(/[^\w\s]/g, '').trim();
    const norm1 = normalize(text1);
    const norm2 = normalize(text2);
    
    if (norm1 === norm2) return 1;
    
    const words1 = new Set(norm1.split(/\s+/));
    const words2 = new Set(norm2.split(/\s+/));
    
    const intersection = new Set([...words1].filter(x => words2.has(x)));
    const union = new Set([...words1, ...words2]);
    
    return intersection.size / union.size;
}

function getMemoryContext(userId) {
    const context = [];
    const memory = userMemory.get(userId) || [];
    
    for (const msg of memory) {
        const role = msg.type === 'user' ? 'user' : 'assistant';
        context.push({ role, content: msg.content });
    }
    
    return context;
}

function isAdmin(userId) {
    return ADMIN_IDS.has(String(userId));
}

// === FONCTIONS D'ENVOI AVEC GESTION DE TRONCATURE ===

async function sendMessage(recipientId, text) {
    if (!PAGE_ACCESS_TOKEN) {
        log.error("‚ùå PAGE_ACCESS_TOKEN manquant");
        return { success: false, error: "No token" };
    }
    
    if (!text || typeof text !== 'string') {
        log.warning("‚ö†Ô∏è Message vide");
        return { success: false, error: "Empty message" };
    }
    
    // üÜï GESTION INTELLIGENTE DES MESSAGES LONGS
    if (text.length > 2000) {
        log.info(`üìè Message long d√©tect√© (${text.length} chars) pour ${recipientId} - Division en chunks`);
        
        const chunks = splitMessageIntoChunks(text, 2000);
        
        if (chunks.length > 1) {
            // Envoyer le premier chunk avec indicateur de continuation
            const firstChunk = chunks[0] + "\n\nüìù *Tape \"continue\" pour la suite...*";
            
            // Sauvegarder l'√©tat de troncature
            truncatedMessages.set(String(recipientId), {
                fullMessage: text,
                lastSentPart: chunks[0]
            });
            
            // Sauvegarder imm√©diatement
            saveDataImmediate();
            
            return await sendSingleMessage(recipientId, firstChunk);
        }
    }
    
    // Message normal
    return await sendSingleMessage(recipientId, text);
}

async function sendSingleMessage(recipientId, text) {
    let finalText = text;
    if (finalText.length > 2000 && !finalText.includes("‚ú® [Message tronqu√© avec amour]")) {
        finalText = finalText.substring(0, 1950) + "...\n‚ú® [Message tronqu√© avec amour]";
    }
    
    const data = {
        recipient: { id: String(recipientId) },
        message: { text: finalText }
    };
    
    try {
        const response = await axios.post(
            "https://graph.facebook.com/v18.0/me/messages",
            data,
            {
                params: { access_token: PAGE_ACCESS_TOKEN },
                timeout: 15000
            }
        );
        
        if (response.status === 200) {
            return { success: true };
        } else {
            log.error(`‚ùå Erreur Facebook API: ${response.status}`);
            return { success: false, error: `API Error ${response.status}` };
        }
    } catch (error) {
        log.error(`‚ùå Erreur envoi: ${error.message}`);
        return { success: false, error: error.message };
    }
}

async function sendImageMessage(recipientId, imageUrl, caption = "") {
    if (!PAGE_ACCESS_TOKEN) {
        log.error("‚ùå PAGE_ACCESS_TOKEN manquant");
        return { success: false, error: "No token" };
    }
    
    if (!imageUrl) {
        log.warning("‚ö†Ô∏è URL d'image vide");
        return { success: false, error: "Empty image URL" };
    }
    
    const data = {
        recipient: { id: String(recipientId) },
        message: {
            attachment: {
                type: "image",
                payload: {
                    url: imageUrl,
                    is_reusable: true
                }
            }
        }
    };
    
    try {
        const response = await axios.post(
            "https://graph.facebook.com/v18.0/me/messages",
            data,
            {
                params: { access_token: PAGE_ACCESS_TOKEN },
                timeout: 20000
            }
        );
        
        if (response.status === 200) {
            if (caption) {
                await sleep(500);
                return await sendMessage(recipientId, caption);
            }
            return { success: true };
        } else {
            log.error(`‚ùå Erreur envoi image: ${response.status}`);
            return { success: false, error: `API Error ${response.status}` };
        }
    } catch (error) {
        log.error(`‚ùå Erreur envoi image: ${error.message}`);
        return { success: false, error: error.message };
    }
}

// === CHARGEMENT DES COMMANDES ===

const COMMANDS = new Map();

// === CONTEXTE DES COMMANDES AVEC SUPPORT CLANS ET EXP√âRIENCE ===
const commandContext = {
    // Variables globales
    VERIFY_TOKEN,
    PAGE_ACCESS_TOKEN,
    MISTRAL_API_KEY,
    GITHUB_TOKEN,
    GITHUB_USERNAME,
    GITHUB_REPO,
    ADMIN_IDS,
    
    // ‚úÖ NOUVEAU: Variables Google Search
    GOOGLE_API_KEYS,
    GOOGLE_SEARCH_ENGINE_IDS,
    googleKeyUsage,
    currentGoogleKeyIndex,
    currentSearchEngineIndex,
    
    userMemory,
    userList,
    userLastImage,
    
    // ‚úÖ AJOUT: Donn√©es persistantes pour les commandes
    clanData: null, // Sera initialis√© par les commandes
    commandData: clanData, // Map pour autres donn√©es de commandes
    
    // üÜï AJOUT: Gestion des messages tronqu√©s
    truncatedMessages,
    
    // Fonctions utilitaires
    log,
    sleep,
    getRandomInt,
    callMistralAPI,
    analyzeImageWithVision,
    webSearch,
    googleSearch, // ‚úÖ NOUVEAU: Acc√®s direct √† Google Search
    addToMemory,
    getMemoryContext,
    isAdmin,
    sendMessage,
    sendImageMessage,
    
    // üÜï AJOUT: Fonctions de gestion de troncature
    splitMessageIntoChunks,
    isContinuationRequest,
    
    // Fonctions de sauvegarde GitHub
    saveDataToGitHub,
    saveDataImmediate,
    loadDataFromGitHub,
    createGitHubRepo
};

// ‚úÖ FONCTION loadCommands MODIFI√âE pour capturer la commande rank
function loadCommands() {
    const commandsDir = path.join(__dirname, 'Cmds');
    
    if (!fs.existsSync(commandsDir)) {
        log.error("‚ùå Dossier 'Cmds' introuvable");
        return;
    }
    
    const commandFiles = fs.readdirSync(commandsDir).filter(file => file.endsWith('.js'));
    
    log.info(`üîç Chargement de ${commandFiles.length} commandes...`);
    
    for (const file of commandFiles) {
        try {
            const commandPath = path.join(commandsDir, file);
            const commandName = path.basename(file, '.js');
            
            delete require.cache[require.resolve(commandPath)];
            
            const commandModule = require(commandPath);
            
            if (typeof commandModule !== 'function') {
                log.error(`‚ùå ${file} doit exporter une fonction`);
                continue;
            }
            
            COMMANDS.set(commandName, commandModule);
            
            // ‚úÖ NOUVEAU: Capturer la commande rank pour l'exp√©rience
            if (commandName === 'rank') {
                rankCommand = commandModule;
                log.info(`üéØ Syst√®me d'exp√©rience activ√© avec la commande rank`);
            }
            
            log.info(`‚úÖ Commande '${commandName}' charg√©e`);
            
        } catch (error) {
            log.error(`‚ùå Erreur chargement ${file}: ${error.message}`);
        }
    }
    
    log.info(`üéâ ${COMMANDS.size} commandes charg√©es avec succ√®s !`);
}

// === FONCTION ANTI-SPAM ===
function isSpam(senderId, message) {
    if (isAdmin(senderId)) return false; // Les admins bypass l'anti-spam
    
    // Normaliser le message pour ignorer les accents et casse
    const normalized = message.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
    
    // D√©tection sp√©cifique pour les patterns connus
    if (normalized === 'du brood' || normalized.includes('le blocage est lance')) {
        return true;
    }
    
    let spamInfo = userSpamData.get(senderId);
    if (!spamInfo) {
        spamInfo = {
            lastMsg: '',
            repeatCount: 0,
            messages: [], // Timestamps des messages r√©cents
            lastCleanup: Date.now()
        };
    }
    
    const now = Date.now();
    
    // Nettoyage des anciens timestamps (garder seulement les 60 derni√®res secondes)
    spamInfo.messages = spamInfo.messages.filter(ts => now - ts < 60000);
    spamInfo.messages.push(now);
    
    // Rate limiting: > 10 messages en 60s = spam
    if (spamInfo.messages.length > 10) {
        userSpamData.set(senderId, spamInfo);
        return true;
    }
    
    // D√©tection de r√©p√©tition
    const normLast = spamInfo.lastMsg.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
    if (normalized === normLast) {
        spamInfo.repeatCount++;
        if (spamInfo.repeatCount >= 3) {
            userSpamData.set(senderId, spamInfo);
            return true;
        }
    } else {
        spamInfo.repeatCount = 1;
        spamInfo.lastMsg = message;
    }
    
    userSpamData.set(senderId, spamInfo);
    return false;
}

async function processCommand(senderId, messageText) {
    const senderIdStr = String(senderId);
    
    if (!messageText || typeof messageText !== 'string') {
        return "ü§ñ Oh l√† l√† ! Message vide ! Tape /start ou /help pour commencer notre belle conversation ! üíï";
    }
    
    messageText = messageText.trim();
    
    // üÜï GESTION DES DEMANDES DE CONTINUATION EN PRIORIT√â
    if (isContinuationRequest(messageText)) {
        const truncatedData = truncatedMessages.get(senderIdStr);
        if (truncatedData) {
            const { fullMessage, lastSentPart } = truncatedData;
            
            // Trouver o√π on s'√©tait arr√™t√©
            const lastSentIndex = fullMessage.indexOf(lastSentPart) + lastSentPart.length;
            const remainingMessage = fullMessage.substring(lastSentIndex);
            
            if (remainingMessage.trim()) {
                const chunks = splitMessageIntoChunks(remainingMessage, 2000);
                const nextChunk = chunks[0];
                
                // Mettre √† jour le cache avec la nouvelle partie envoy√©e
                if (chunks.length > 1) {
                    truncatedMessages.set(senderIdStr, {
                        fullMessage: fullMessage,
                        lastSentPart: lastSentPart + nextChunk
                    });
                    
                    // Ajouter un indicateur de continuation
                    const continuationMsg = nextChunk + "\n\nüìù *Tape \"continue\" pour la suite...*";
                    addToMemory(senderIdStr, 'user', messageText);
                    addToMemory(senderIdStr, 'assistant', continuationMsg);
                    saveDataImmediate(); // Sauvegarder l'√©tat
                    return continuationMsg;
                } else {
                    // Message termin√©
                    truncatedMessages.delete(senderIdStr);
                    addToMemory(senderIdStr, 'user', messageText);
                    addToMemory(senderIdStr, 'assistant', nextChunk);
                    saveDataImmediate(); // Sauvegarder l'√©tat
                    return nextChunk;
                }
            } else {
                // Plus rien √† envoyer
                truncatedMessages.delete(senderIdStr);
                const endMsg = "‚úÖ C'est tout ! Y a-t-il autre chose que je puisse faire pour toi ? üí´";
                addToMemory(senderIdStr, 'user', messageText);
                addToMemory(senderIdStr, 'assistant', endMsg);
                saveDataImmediate(); // Sauvegarder l'√©tat
                return endMsg;
            }
        } else {
            // Pas de message tronqu√© en cours
            const noTruncMsg = "ü§î Il n'y a pas de message en cours √† continuer. Pose-moi une nouvelle question ! üí°";
            addToMemory(senderIdStr, 'user', messageText);
            addToMemory(senderIdStr, 'assistant', noTruncMsg);
            return noTruncMsg;
        }
    }
    
    if (!messageText.startsWith('/')) {
        if (COMMANDS.has('chat')) {
            return await COMMANDS.get('chat')(senderId, messageText, commandContext);
        }
        return "ü§ñ Coucou ! Tape /start ou /help pour d√©couvrir ce que je peux faire ! ‚ú®";
    }
    
    const parts = messageText.substring(1).split(' ');
    const command = parts[0].toLowerCase();
    const args = parts.slice(1).join(' ');
    
    if (COMMANDS.has(command)) {
        try {
            return await COMMANDS.get(command)(senderId, args, commandContext);
        } catch (error) {
            log.error(`‚ùå Erreur commande ${command}: ${error.message}`);
            return `üí• Oh non ! Petite erreur dans /${command} ! R√©essaie ou tape /help ! üíï`;
        }
    }
    
    return `‚ùì Oh ! La commande /${command} m'est inconnue ! Tape /help pour voir tout ce que je sais faire ! ‚ú®üíï`;
}

// === ROUTES EXPRESS ===

// === ROUTE D'ACCUEIL MISE √Ä JOUR ===
app.get('/', (req, res) => {
    const clanCount = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
    const expDataCount = rankCommand ? Object.keys(rankCommand.getExpData()).length : 0;
    
    res.json({
        status: "ü§ñ NakamaBot v4.0 Amicale + Vision + GitHub + Clans + Rank + Truncation + Google Search Online ! üíñ",
        creator: "Durand",
        personality: "Super gentille et amicale, comme une tr√®s bonne amie",
        year: "2025",
        commands: COMMANDS.size,
        users: userList.size,
        conversations: userMemory.size,
        images_stored: userLastImage.size,
        clans_total: clanCount,
        users_with_exp: expDataCount,
        truncated_messages: truncatedMessages.size,
        google_api_keys: GOOGLE_API_KEYS.length,
        google_search_engines: GOOGLE_SEARCH_ENGINE_IDS.length,
        version: "4.0 Amicale + Vision + GitHub + Clans + Rank + Truncation + Google Search",
        storage: {
            type: "GitHub API",
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            persistent: Boolean(GITHUB_TOKEN && GITHUB_USERNAME),
            auto_save: "Every 5 minutes",
            includes: ["users", "conversations", "images", "clans", "command_data", "user_exp", "truncated_messages", "google_key_usage"]
        },
        features: [
            "G√©n√©ration d'images IA",
            "Transformation anime", 
            "Analyse d'images IA",
            "Chat intelligent et doux",
            "Syst√®me de clans persistant",
            "Syst√®me de ranking et exp√©rience",
            "Cartes de rang personnalis√©es",
            "Gestion intelligente des messages longs",
            "Continuation automatique des r√©ponses",
            "Recherche Google avec rotation de cl√©s",
            "Fallback recherche IA",
            "Broadcast admin",
            "Stats r√©serv√©es admin",
            "Sauvegarde permanente GitHub"
        ],
        last_update: new Date().toISOString()
    });
});

// Webhook Facebook Messenger
app.get('/webhook', (req, res) => {
    const mode = req.query['hub.mode'];
    const token = req.query['hub.verify_token'];
    const challenge = req.query['hub.challenge'];
    
    if (mode === 'subscribe' && token === VERIFY_TOKEN) {
        log.info('‚úÖ Webhook v√©rifi√©');
        res.status(200).send(challenge);
    } else {
        log.warning('‚ùå √âchec v√©rification webhook');
        res.status(403).send('Verification failed');
    }
});

// ‚úÖ WEBHOOK PRINCIPAL MODIFI√â - AJOUT D'EXP√âRIENCE ET NOTIFICATIONS DE NIVEAU
// ‚úÖ WEBHOOK PRINCIPAL MODIFI√â - AJOUT D'EXP√âRIENCE ET NOTIFICATIONS DE NIVEAU + GESTION DU BLOCAGE + ANTI-SPAM
app.post('/webhook', async (req, res) => {
    try {
        const data = req.body;
        
        if (!data) {
            log.warning('‚ö†Ô∏è Aucune donn√©e re√ßue');
            return res.status(400).json({ error: "No data received" });
        }
        
        for (const entry of data.entry || []) {
            for (const event of entry.messaging || []) {
                const senderId = event.sender?.id;
                
                if (!senderId) {
                    continue;
                }
                
                const senderIdStr = String(senderId);
                
                if (event.message && !event.message.is_echo) {
                    const wasNewUser = !userList.has(senderIdStr);
                    userList.add(senderIdStr);
                    
                    if (wasNewUser) {
                        log.info(`üëã Nouvel utilisateur: ${senderId}`);
                        saveDataImmediate();
                    }
                    
                    // ‚úÖ NOUVEAU: V√©rification du blocage
                    if (!isAdmin(senderIdStr)) {
                        const blockMode = commandData.get('blockMode');
                        const blockMsg = commandData.get('blockMessage');
                        
                        // V√©rifier la blacklist en premier (blocage permanent)
                        const blacklist = commandData.get('blacklist') || new Map();
                        const blacklistMsg = blacklist.get(senderIdStr);
                        if (blacklistMsg) {
                            const sendResult = await sendMessage(senderId, blacklistMsg);
                            if (sendResult.success) {
                                log.info(`üö´ Blacklist bloqu√© pour ${senderId}`);
                            }
                            continue; // Ignorer le message
                        }
                        
                        // Puis le blocage g√©n√©ral
                        if (blockMode && blockMsg) {
                            let isBlocked = false;
                            
                            if (blockMode === 'all') {
                                isBlocked = true;
                            } else if (blockMode === 'new' && wasNewUser) {
                                isBlocked = true;
                            } else if (blockMode === 'old' && !wasNewUser) {
                                isBlocked = true;
                            }
                            
                            if (isBlocked) {
                                const sendResult = await sendMessage(senderId, blockMsg);
                                if (sendResult.success) {
                                    log.info(`üö´ Message bloqu√© pour ${senderId} (mode: ${blockMode})`);
                                }
                                continue; // Passer √† l'√©v√©nement suivant
                            }
                        }
                    }
                    
                    if (event.message.attachments) {
                        for (const attachment of event.message.attachments) {
                            if (attachment.type === 'image') {
                                const imageUrl = attachment.payload?.url;
                                if (imageUrl) {
                                    userLastImage.set(senderIdStr, imageUrl);
                                    log.info(`üì∏ Image re√ßue de ${senderId}`);
                                    
                                    addToMemory(senderId, 'user', '[Image envoy√©e]');
                                    
                                    // ‚úÖ NOUVEAU: Ajouter de l'exp√©rience pour l'envoi d'image
                                    if (rankCommand) {
                                        const expResult = rankCommand.addExp(senderId, 2); // 2 XP pour une image
                                        
                                        if (expResult.levelUp) {
                                            log.info(`üéâ ${senderId} a atteint le niveau ${expResult.newLevel} (image) !`);
                                        }
                                    }
                                    
                                    saveDataImmediate();
                                    
                                    const response = "‚úÖ";
                                    
                                    const sendResult = await sendMessage(senderId, response);
                                    if (sendResult.success) {
                                        addToMemory(senderId, 'assistant', response);
                                    }
                                    continue;
                                }
                            }
                        }
                    }
                    
                    const messageText = event.message.text?.trim();
                    
                    if (messageText) {
                        log.info(`üì® Message de ${senderId}: ${messageText.substring(0, 50)}...`);
                        
                        // ‚úÖ NOUVEAU: V√©rification anti-spam
                        if (isSpam(senderIdStr, messageText)) {
                            log.info(`üö´ Spam d√©tect√© de ${senderId}: ${messageText.substring(0, 50)}...`);
                            continue; // Ignorer le message sans r√©ponse
                        }
                        
                        // ‚úÖ NOUVEAU: Ajouter de l'exp√©rience pour chaque message
                        if (messageText && rankCommand) {
                            const expResult = rankCommand.addExp(senderId, 1);
                            
                            // Notifier si l'utilisateur a mont√© de niveau
                            if (expResult.levelUp) {
                                log.info(`üéâ ${senderId} a atteint le niveau ${expResult.newLevel} !`);
                            }
                            
                            // Sauvegarder les donn√©es mises √† jour
                            saveDataImmediate();
                        }
                        
                        const response = await processCommand(senderId, messageText);
                        
                        if (response) {
                            if (typeof response === 'object' && response.type === 'image') {
                                const sendResult = await sendImageMessage(senderId, response.url, response.caption);
                                
                                if (sendResult.success) {
                                    log.info(`‚úÖ Image envoy√©e √† ${senderId}`);
                                } else {
                                    log.warning(`‚ùå √âchec envoi image √† ${senderId}`);
                                    const fallbackMsg = "üé® Image cr√©√©e avec amour mais petite erreur d'envoi ! R√©essaie ! üíï";
                                    const fallbackResult = await sendMessage(senderId, fallbackMsg);
                                    if (fallbackResult.success) {
                                        addToMemory(senderId, 'assistant', fallbackMsg);
                                    }
                                }
                            } else if (typeof response === 'string') {
                                const sendResult = await sendMessage(senderId, response);
                                
                                if (sendResult.success) {
                                    log.info(`‚úÖ R√©ponse envoy√©e √† ${senderId}`);
                                } else {
                                    log.warning(`‚ùå √âchec envoi √† ${senderId}`);
                                }
                            }
                        }
                    }
                }
            }
        }
    } catch (error) {
        log.error(`‚ùå Erreur webhook: ${error.message}`);
        return res.status(500).json({ error: `Webhook error: ${error.message}` });
    }
    
    res.status(200).json({ status: "ok" });
});

// ‚úÖ NOUVELLE ROUTE: Statistiques Google Search
app.get('/google-stats', (req, res) => {
    const today = new Date().toDateString();
    const keyStats = [];
    
    for (let keyIndex = 0; keyIndex < GOOGLE_API_KEYS.length; keyIndex++) {
        for (let engineIndex = 0; engineIndex < GOOGLE_SEARCH_ENGINE_IDS.length; engineIndex++) {
            const keyId = `${keyIndex}-${engineIndex}-${today}`;
            const usage = googleKeyUsage.get(keyId) || 0;
            const remaining = GOOGLE_DAILY_LIMIT - usage;
            
            keyStats.push({
                keyIndex,
                engineIndex,
                searchEngineId: GOOGLE_SEARCH_ENGINE_IDS[engineIndex],
                usage,
                remaining,
                limit: GOOGLE_DAILY_LIMIT,
                percentage: Math.round((usage / GOOGLE_DAILY_LIMIT) * 100)
            });
        }
    }
    
    res.json({
        success: true,
        date: today,
        currentKeyIndex: currentGoogleKeyIndex,
        currentEngineIndex: currentSearchEngineIndex,
        totalKeys: GOOGLE_API_KEYS.length,
        totalEngines: GOOGLE_SEARCH_ENGINE_IDS.length,
        totalCombinations: GOOGLE_API_KEYS.length * GOOGLE_SEARCH_ENGINE_IDS.length,
        keyStats: keyStats,
        summary: {
            totalUsage: keyStats.reduce((sum, stat) => sum + stat.usage, 0),
            totalRemaining: keyStats.reduce((sum, stat) => sum + stat.remaining, 0),
            averageUsage: Math.round(keyStats.reduce((sum, stat) => sum + stat.percentage, 0) / keyStats.length),
            exhaustedKeys: keyStats.filter(stat => stat.remaining <= 0).length
        },
        timestamp: new Date().toISOString()
    });
});

// Route pour cr√©er un nouveau repository GitHub
app.post('/create-repo', async (req, res) => {
    try {
        if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
            return res.status(400).json({
                success: false,
                error: "GITHUB_TOKEN ou GITHUB_USERNAME manquant"
            });
        }

        const repoCreated = await createGitHubRepo();
        
        if (repoCreated) {
            res.json({
                success: true,
                message: "Repository GitHub cr√©√© avec succ√®s !",
                repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
                url: `https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO}`,
                instructions: [
                    "Le repository a √©t√© cr√©√© automatiquement",
                    "Les donn√©es seront sauvegard√©es automatiquement",
                    "V√©rifiez que le repository est priv√© pour la s√©curit√©"
                ],
                timestamp: new Date().toISOString()
            });
        } else {
            res.status(500).json({
                success: false,
                error: "Impossible de cr√©er le repository"
            });
        }
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// Route pour tester la connexion GitHub
app.get('/test-github', async (req, res) => {
    try {
        if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
            return res.status(400).json({
                success: false,
                error: "Configuration GitHub manquante",
                missing: {
                    token: !GITHUB_TOKEN,
                    username: !GITHUB_USERNAME
                }
            });
        }

        const repoUrl = `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}`;
        const response = await axios.get(repoUrl, {
            headers: {
                'Authorization': `token ${GITHUB_TOKEN}`,
                'Accept': 'application/vnd.github.v3+json'
            },
            timeout: 10000
        });

        res.json({
            success: true,
            message: "Connexion GitHub OK !",
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            url: `https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO}`,
            status: response.status,
            private: response.data.private,
            created_at: response.data.created_at,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        let errorMessage = error.message;
        let suggestions = [];

        if (error.response?.status === 404) {
            errorMessage = "Repository introuvable (404)";
            suggestions = [
                "V√©rifiez que GITHUB_USERNAME et GITHUB_REPO sont corrects",
                "Utilisez POST /create-repo pour cr√©er automatiquement le repository"
            ];
        } else if (error.response?.status === 401) {
            errorMessage = "Token GitHub invalide (401)";
            suggestions = ["V√©rifiez votre GITHUB_TOKEN"];
        } else if (error.response?.status === 403) {
            errorMessage = "Acc√®s refus√© (403)";
            suggestions = ["V√©rifiez les permissions de votre token (repo, contents)"];
        }

        res.status(error.response?.status || 500).json({
            success: false,
            error: errorMessage,
            suggestions: suggestions,
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            timestamp: new Date().toISOString()
        });
    }
});

// ‚úÖ NOUVELLE ROUTE: Tester les cl√©s Google Search
app.get('/test-google', async (req, res) => {
    try {
        if (GOOGLE_API_KEYS.length === 0 || GOOGLE_SEARCH_ENGINE_IDS.length === 0) {
            return res.status(400).json({
                success: false,
                error: "Configuration Google Search manquante",
                missing: {
                    apiKeys: GOOGLE_API_KEYS.length === 0,
                    searchEngines: GOOGLE_SEARCH_ENGINE_IDS.length === 0
                },
                instructions: [
                    "Ajoutez GOOGLE_API_KEYS (s√©par√©es par des virgules)",
                    "Ajoutez GOOGLE_SEARCH_ENGINE_IDS (s√©par√©s par des virgules)",
                    "Obtenez vos cl√©s sur https://console.developers.google.com"
                ]
            });
        }

        const testQuery = "test search";
        const results = await googleSearch(testQuery, 3);

        if (results && results.length > 0) {
            res.json({
                success: true,
                message: "Google Search API fonctionne !",
                testQuery: testQuery,
                resultsFound: results.length,
                sampleResult: results[0],
                configuration: {
                    totalApiKeys: GOOGLE_API_KEYS.length,
                    totalSearchEngines: GOOGLE_SEARCH_ENGINE_IDS.length,
                    totalCombinations: GOOGLE_API_KEYS.length * GOOGLE_SEARCH_ENGINE_IDS.length,
                    currentKeyIndex: currentGoogleKeyIndex,
                    currentEngineIndex: currentSearchEngineIndex
                },
                timestamp: new Date().toISOString()
            });
        } else {
            res.status(500).json({
                success: false,
                error: "Google Search API ne fonctionne pas",
                testQuery: testQuery,
                configuration: {
                    totalApiKeys: GOOGLE_API_KEYS.length,
                    totalSearchEngines: GOOGLE_SEARCH_ENGINE_IDS.length
                },
                suggestions: [
                    "V√©rifiez que vos cl√©s API Google sont valides",
                    "V√©rifiez que vos Search Engine IDs sont corrects",
                    "V√©rifiez que les APIs sont activ√©es dans Google Console",
                    "Consultez /google-stats pour voir l'usage des cl√©s"
                ],
                timestamp: new Date().toISOString()
            });
        }

    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// Route pour forcer une sauvegarde
app.post('/force-save', async (req, res) => {
    try {
        await saveDataToGitHub();
        const clanCount = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
        const expDataCount = rankCommand ? Object.keys(rankCommand.getExpData()).length : 0;
        
        res.json({
            success: true,
            message: "Donn√©es sauvegard√©es avec succ√®s sur GitHub !",
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            timestamp: new Date().toISOString(),
            stats: {
                users: userList.size,
                conversations: userMemory.size,
                images: userLastImage.size,
                clans: clanCount,
                users_with_exp: expDataCount,
                truncated_messages: truncatedMessages.size,
                google_key_usage_entries: googleKeyUsage.size
            }
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// Route pour recharger les donn√©es depuis GitHub
app.post('/reload-data', async (req, res) => {
    try {
        await loadDataFromGitHub();
        const clanCount = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
        const expDataCount = rankCommand ? Object.keys(rankCommand.getExpData()).length : 0;
        
        res.json({
            success: true,
            message: "Donn√©es recharg√©es avec succ√®s depuis GitHub !",
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            timestamp: new Date().toISOString(),
            stats: {
                users: userList.size,
                conversations: userMemory.size,
                images: userLastImage.size,
                clans: clanCount,
                users_with_exp: expDataCount,
                truncated_messages: truncatedMessages.size,
                google_key_usage_entries: googleKeyUsage.size
            }
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// === STATISTIQUES PUBLIQUES MISES √Ä JOUR AVEC EXP√âRIENCE ET TRONCATURE ===
app.get('/stats', (req, res) => {
    const clanCount = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
    const expDataCount = rankCommand ? Object.keys(rankCommand.getExpData()).length : 0;
    
    res.json({
        users_count: userList.size,
        conversations_count: userMemory.size,
        images_stored: userLastImage.size,
        clans_total: clanCount,
        users_with_exp: expDataCount,
        truncated_messages: truncatedMessages.size,
        google_api_keys: GOOGLE_API_KEYS.length,
        google_search_engines: GOOGLE_SEARCH_ENGINE_IDS.length,
        commands_available: COMMANDS.size,
        version: "4.0 Amicale + Vision + GitHub + Clans + Rank + Truncation + Google Search",
        creator: "Durand",
        personality: "Super gentille et amicale, comme une tr√®s bonne amie",
        year: 2025,
        storage: {
            type: "GitHub API",
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            persistent: Boolean(GITHUB_TOKEN && GITHUB_USERNAME),
            auto_save_interval: "5 minutes",
            data_types: ["users", "conversations", "images", "clans", "command_data", "user_exp", "truncated_messages", "google_key_usage"]
        },
        features: [
            "AI Image Generation",
            "Anime Transformation", 
            "AI Image Analysis",
            "Friendly Chat",
            "Persistent Clan System",
            "User Ranking System",
            "Experience & Levels",
            "Smart Message Truncation",
            "Message Continuation",
            "Google Search with Key Rotation",
            "AI Fallback Search",
            "Admin Stats",
            "Help Suggestions",
            "GitHub Persistent Storage"
        ],
        note: "Statistiques d√©taill√©es r√©serv√©es aux admins via /stats"
    });
});

// === SANT√â DU BOT MISE √Ä JOUR AVEC EXP√âRIENCE ET TRONCATURE ===
app.get('/health', (req, res) => {
    const clanCount = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
    const expDataCount = rankCommand ? Object.keys(rankCommand.getExpData()).length : 0;
    
    const healthStatus = {
        status: "healthy",
        personality: "Super gentille et amicale, comme une tr√®s bonne amie üíñ",
        services: {
            ai: Boolean(MISTRAL_API_KEY),
            vision: Boolean(MISTRAL_API_KEY),
            facebook: Boolean(PAGE_ACCESS_TOKEN),
            github_storage: Boolean(GITHUB_TOKEN && GITHUB_USERNAME),
            google_search: GOOGLE_API_KEYS.length > 0 && GOOGLE_SEARCH_ENGINE_IDS.length > 0,
            ranking_system: Boolean(rankCommand),
            message_truncation: true
        },
        data: {
            users: userList.size,
            conversations: userMemory.size,
            images_stored: userLastImage.size,
            clans_total: clanCount,
            users_with_exp: expDataCount,
            truncated_messages: truncatedMessages.size,
            commands_loaded: COMMANDS.size,
            google_keys: GOOGLE_API_KEYS.length,
            search_engines: GOOGLE_SEARCH_ENGINE_IDS.length
        },
        version: "4.0 Amicale + Vision + GitHub + Clans + Rank + Truncation + Google Search",
        creator: "Durand",
        repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
        timestamp: new Date().toISOString()
    };
    
    const issues = [];
    if (!MISTRAL_API_KEY) {
        issues.push("Cl√© IA manquante");
    }
    if (!PAGE_ACCESS_TOKEN) {
        issues.push("Token Facebook manquant");
    }
    if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
        issues.push("Configuration GitHub manquante");
    }
    if (GOOGLE_API_KEYS.length === 0 || GOOGLE_SEARCH_ENGINE_IDS.length === 0) {
        issues.push("Configuration Google Search manquante");
    }
    if (COMMANDS.size === 0) {
        issues.push("Aucune commande charg√©e");
    }
    if (!rankCommand) {
        issues.push("Syst√®me de ranking non charg√©");
    }
    
    if (issues.length > 0) {
        healthStatus.status = "degraded";
        healthStatus.issues = issues;
    }
    
    const statusCode = healthStatus.status === "healthy" ? 200 : 503;
    res.status(statusCode).json(healthStatus);
});

// === SERVEUR DE FICHIERS STATIQUES POUR LES IMAGES TEMPORAIRES ===

app.use('/temp', express.static(path.join(__dirname, 'temp')));

// Middleware pour nettoyer automatiquement les anciens fichiers temporaires
app.use('/temp', (req, res, next) => {
    // Nettoyer les fichiers de plus de 1 heure
    const tempDir = path.join(__dirname, 'temp');
    if (fs.existsSync(tempDir)) {
        const files = fs.readdirSync(tempDir);
        const now = Date.now();
        
        files.forEach(file => {
            const filePath = path.join(tempDir, file);
            const stats = fs.statSync(filePath);
            const ageInMs = now - stats.mtime.getTime();
            
            // Supprimer si plus d'1 heure (3600000 ms)
            if (ageInMs > 3600000) {
                try {
                    fs.unlinkSync(filePath);
                    log.debug(`üóëÔ∏è Fichier temporaire nettoy√©: ${file}`);
                } catch (error) {
                    // Nettoyage silencieux
                }
            }
        });
    }
    next();
});

// Route pour voir l'historique des commits GitHub
app.get('/github-history', async (req, res) => {
    try {
        if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
            return res.status(400).json({
                success: false,
                error: "Configuration GitHub manquante"
            });
        }

        const commitsUrl = `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/commits`;
        const response = await axios.get(commitsUrl, {
            headers: {
                'Authorization': `token ${GITHUB_TOKEN}`,
                'Accept': 'application/vnd.github.v3+json'
            },
            params: {
                per_page: 10
            },
            timeout: 10000
        });

        const commits = response.data.map(commit => ({
            message: commit.commit.message,
            date: commit.commit.author.date,
            sha: commit.sha.substring(0, 7),
            author: commit.commit.author.name
        }));

        res.json({
            success: true,
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            commits: commits,
            total_shown: commits.length,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        res.status(error.response?.status || 500).json({
            success: false,
            error: error.message,
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`
        });
    }
});

// üÜï NOUVELLE ROUTE: Nettoyer les messages tronqu√©s (admin uniquement)
app.post('/clear-truncated', (req, res) => {
    const clearedCount = truncatedMessages.size;
    truncatedMessages.clear();
    
    // Sauvegarder imm√©diatement
    saveDataImmediate();
    
    res.json({
        success: true,
        message: `${clearedCount} conversations tronqu√©es nettoy√©es`,
        timestamp: new Date().toISOString()
    });
});

// ‚úÖ NOUVELLE ROUTE: R√©initialiser les compteurs Google (admin uniquement)
app.post('/reset-google-counters', (req, res) => {
    const clearedCount = googleKeyUsage.size;
    googleKeyUsage.clear();
    currentGoogleKeyIndex = 0;
    currentSearchEngineIndex = 0;
    
    // Sauvegarder imm√©diatement
    saveDataImmediate();
    
    res.json({
        success: true,
        message: `${clearedCount} compteurs Google r√©initialis√©s`,
        newKeyIndex: currentGoogleKeyIndex,
        newEngineIndex: currentSearchEngineIndex,
        timestamp: new Date().toISOString()
    });
});

// === D√âMARRAGE MODIFI√â AVEC SYST√àME D'EXP√âRIENCE ET TRONCATURE ===

const PORT = process.env.PORT || 5000;

async function startBot() {
    log.info("üöÄ D√©marrage NakamaBot v4.0 Amicale + Vision + GitHub + Clans + Rank + Truncation + Google Search");
    log.info("üíñ Personnalit√© super gentille et amicale, comme une tr√®s bonne amie");
    log.info("üë®‚Äçüíª Cr√©√©e par Durand");
    log.info("üìÖ Ann√©e: 2025");

    log.info("üì• Chargement des donn√©es depuis GitHub...");
    await loadDataFromGitHub();

    loadCommands();

    // ‚úÖ NOUVEAU: Charger les donn√©es d'exp√©rience apr√®s le chargement des commandes
    if (rankCommand) {
        log.info("üéØ Syst√®me d'exp√©rience d√©tect√© et pr√™t !");
    } else {
        log.warning("‚ö†Ô∏è Commande rank non trouv√©e - Syst√®me d'exp√©rience d√©sactiv√©");
    }

    const missingVars = [];
    if (!PAGE_ACCESS_TOKEN) {
        missingVars.push("PAGE_ACCESS_TOKEN");
    }
    if (!MISTRAL_API_KEY) {
        missingVars.push("MISTRAL_API_KEY");
    }
    if (!GITHUB_TOKEN) {
        missingVars.push("GITHUB_TOKEN");
    }
    if (!GITHUB_USERNAME) {
        missingVars.push("GITHUB_USERNAME");
    }
    if (GOOGLE_API_KEYS.length === 0) {
        missingVars.push("GOOGLE_API_KEYS");
    }
    if (GOOGLE_SEARCH_ENGINE_IDS.length === 0) {
        missingVars.push("GOOGLE_SEARCH_ENGINE_IDS");
    }

    if (missingVars.length > 0) {
        log.error(`‚ùå Variables manquantes: ${missingVars.join(', ')}`);
    } else {
        log.info("‚úÖ Configuration compl√®te OK");
    }

    const clanCount = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
    const expDataCount = rankCommand ? Object.keys(rankCommand.getExpData()).length : 0;

    log.info(`üé® ${COMMANDS.size} commandes disponibles`);
    log.info(`üë• ${userList.size} utilisateurs en m√©moire`);
    log.info(`üí¨ ${userMemory.size} conversations en m√©moire`);
    log.info(`üñºÔ∏è ${userLastImage.size} images en m√©moire`);
    log.info(`üè∞ ${clanCount} clans en m√©moire`);
    log.info(`‚≠ê ${expDataCount} utilisateurs avec exp√©rience`);
    log.info(`üìù ${truncatedMessages.size} conversations tronqu√©es en cours`);
    log.info(`üîë ${GOOGLE_API_KEYS.length} cl√©s Google API configur√©es`);
    log.info(`üîç ${GOOGLE_SEARCH_ENGINE_IDS.length} moteurs de recherche configur√©s`);
    log.info(`üìä ${GOOGLE_API_KEYS.length * GOOGLE_SEARCH_ENGINE_IDS.length} combinaisons possibles`);
    log.info(`üîê ${ADMIN_IDS.size} administrateurs`);
    log.info(`üìÇ Repository: ${GITHUB_USERNAME}/${GITHUB_REPO}`);
    log.info(`üåê Serveur sur le port ${PORT}`);
    
    startAutoSave();
    
    log.info("üéâ NakamaBot Amicale + Vision + GitHub + Clans + Rank + Truncation + Google Search pr√™te √† aider avec gentillesse !");

    app.listen(PORT, () => {
        log.info(`üåê Serveur d√©marr√© sur le port ${PORT}`);
        log.info("üíæ Sauvegarde automatique GitHub activ√©e");
        log.info("üìè Gestion intelligente des messages longs activ√©e");
        log.info("üîç Recherche Google avec rotation de cl√©s activ√©e");
        log.info(`üìä Dashboard: https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO}`);
    });
}

// Fonction de nettoyage lors de l'arr√™t
async function gracefulShutdown() {
    log.info("üõë Arr√™t du bot avec tendresse...");
    
    if (saveInterval) {
        clearInterval(saveInterval);
        log.info("‚èπÔ∏è Sauvegarde automatique arr√™t√©e");
    }
    
    try {
        log.info("üíæ Sauvegarde finale des donn√©es sur GitHub...");
        await saveDataToGitHub();
        log.info("‚úÖ Donn√©es sauvegard√©es avec succ√®s !");
    } catch (error) {
        log.error(`‚ùå Erreur sauvegarde finale: ${error.message}`);
    }
    
    // Nettoyage final des messages tronqu√©s
    const truncatedCount = truncatedMessages.size;
    if (truncatedCount > 0) {
        log.info(`üßπ Nettoyage de ${truncatedCount} conversations tronqu√©es en cours...`);
        truncatedMessages.clear();
    }
    
    // R√©sum√© final des cl√©s Google
    const googleUsageCount = googleKeyUsage.size;
    if (googleUsageCount > 0) {
        log.info(`üìä ${googleUsageCount} entr√©es d'usage Google sauvegard√©es`);
    }
    
    log.info("üëã Au revoir ! Donn√©es sauvegard√©es sur GitHub !");
    log.info(`üìÇ Repository: https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO}`);
    process.exit(0);
}

// Gestion propre de l'arr√™t
process.on('SIGINT', gracefulShutdown);
process.on('SIGTERM', gracefulShutdown);

// Gestion des erreurs non captur√©es
process.on('uncaughtException', async (error) => {
    log.error(`‚ùå Erreur non captur√©e: ${error.message}`);
    await gracefulShutdown();
});

process.on('unhandledRejection', async (reason, promise) => {
    log.error(`‚ùå Promesse rejet√©e: ${reason}`);
    await gracefulShutdown();
});

// üÜï NETTOYAGE P√âRIODIQUE: Nettoyer les messages tronqu√©s anciens (plus de 24h)
setInterval(() => {
    const now = Date.now();
    const oneDayMs = 24 * 60 * 60 * 1000; // 24 heures en millisecondes
    let cleanedCount = 0;
    
    for (const [userId, data] of truncatedMessages.entries()) {
        // Si le message n'a pas de timestamp ou est trop ancien
        if (!data.timestamp || (now - new Date(data.timestamp).getTime() > oneDayMs)) {
            truncatedMessages.delete(userId);
            cleanedCount++;
        }
    }
    
    if (cleanedCount > 0) {
        log.info(`üßπ Nettoyage automatique: ${cleanedCount} conversations tronqu√©es expir√©es supprim√©es`);
        saveDataImmediate(); // Sauvegarder le nettoyage
    }
}, 60 * 60 * 1000); // V√©rifier toutes les heures

// ‚úÖ NOUVEAU NETTOYAGE P√âRIODIQUE: Nettoyer les anciens compteurs Google (plus de 7 jours)
setInterval(() => {
    const now = Date.now();
    const sevenDaysMs = 7 * 24 * 60 * 60 * 1000; // 7 jours en millisecondes
    const today = new Date().toDateString();
    let cleanedCount = 0;
    
    for (const [keyId, usage] of googleKeyUsage.entries()) {
        // Extraire la date du keyId (format: keyIndex-engineIndex-date)
        const datePart = keyId.split('-')[2];
        if (datePart && datePart !== today) {
            try {
                const keyDate = new Date(datePart).getTime();
                if (now - keyDate > sevenDaysMs) {
                    googleKeyUsage.delete(keyId);
                    cleanedCount++;
                }
            } catch (error) {
                // Si on ne peut pas parser la date, supprimer la cl√©
                googleKeyUsage.delete(keyId);
                cleanedCount++;
            }
        }
    }
    
    if (cleanedCount > 0) {
        log.info(`üßπ Nettoyage Google: ${cleanedCount} anciens compteurs de cl√©s supprim√©s`);
        saveDataImmediate(); // Sauvegarder le nettoyage
    }
}, 24 * 60 * 60 * 1000); // V√©rifier tous les jours

// D√©marrer le bot
startBot().catch(error => {
    log.error(`‚ùå Erreur d√©marrage: ${error.message}`);
    process.exit(1);
});
